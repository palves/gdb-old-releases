# Copyright (c) 1995 Sun Microsystems, Inc.
#
# Borland C++ 4.5 makefile
#

#
# Project directories
#
# ROOT = top of source tree
# TMPDIR = location where .obj files should be stored during build
# TOOLS = location of compiler and other development tools
#

ROOT	= ..
TMPDIR	= .
TOOLS	= d:\bc45

# uncomment the following line to compile with symbols
#DEBUG=1

# uncomment the following two lines to compile with TCL_MEM_DEBUG
#DEBUGDEFINES	=TCL_MEM_DEBUG

#
# Borland C++ tools
#

BORLAND = $(TOOLS)
IMPLIB  = Implib
BCC32   = Bcc32
BCC     = Bcc
RC	= brcc32
RC16	= brcc32 -31
CP      = copy
RM      = del /q/f

INCLUDES =	$(BORLAND)\include;$(ROOT)\generic;$(ROOT)\win
LIBDIRS =	$(BORLAND)\lib;$(ROOT)\win


!ifndef DEBUG

# these macros cause maximum optimization and no symbols
DEBUGLDFLAGS = 
DEBUGCCFLAGS = -v- -vi- -O2
DEBUGLDFLAGS16 = -Oc -Oi -Oa -Or
!else

# these macros enable debugging
DEBUGLDFLAGS = -v
DEBUGCCFLAGS = -k -Od -v
DEBUGLDFLAGS16 = 

!endif

DEFINES = _RTLDLL;USE_PROTOTYPE;HAS_STDARG;HAS_DIRENT;STRICT;$(DEBUGDEFINES)
PROJECTCCFLAGS= $(DEBUGCCFLAGS) -w-par -w-stu

LNFLAGS_exe = -Tpe -aa -c $(DEBUGLDFLAGS) $(BORLAND)\lib\c0w32
LNFLAGS_dll = -Tpd -aa -c $(DEBUGLDFLAGS) $(BORLAND)\lib\c0d32
LNFLAGS16_dll = -Twd -c -C -A=16 $(DEBUGLDFLAGS16)
LNLIBS_exe = $(TCLLIB) import32 cw32i
LNLIBS_dll = import32 cw32i
LNLIBS16_dll = import

# 
# Global makefile settings
#

.AUTODEPEND
.CACHEAUTODEPEND

.suffixes: .c .dll .lib .obj .exe

.path.c=$(ROOT)\win;$(ROOT)\generic;$(ROOT)\compat;$(ROOT)\unix
.path.obj=$(TMPDIR)

TCLSHOBJS = \
	$(TMPDIR)\tclWinConsole.obj \
	$(TMPDIR)\winMain.obj

TCLTESTOBJS = \
	$(TMPDIR)\tclWinConsole.obj \
	$(TMPDIR)\tclTest.obj \
	$(TMPDIR)\testMain.obj

TCLCOMPATOBJS = \
	$(TMPDIR)\gettod.obj

TCLOBJS = \
	$(TCLCOMPATOBJS) \
	$(TMPDIR)\tclCkalloc.obj \
	$(TMPDIR)\tclWinFile.obj \
	$(TMPDIR)\tclWinMtherr.obj \
	$(TMPDIR)\tclWinLoad.obj \
	$(TMPDIR)\tclUnixAZ.obj \
	$(TMPDIR)\tclUnixStr.obj \
	$(TMPDIR)\tclUnixUtil.obj \
	$(TMPDIR)\tclWinPipe.obj \
	$(TMPDIR)\panic.obj \
	$(TMPDIR)\tclEnv.obj \
	$(TMPDIR)\tclGlob.obj \
	$(TMPDIR)\regexp.obj \
	$(TMPDIR)\tclAsync.obj \
	$(TMPDIR)\tclBasic.obj \
	$(TMPDIR)\tclCmdAH.obj \
	$(TMPDIR)\tclCmdIL.obj \
	$(TMPDIR)\tclCmdMZ.obj \
	$(TMPDIR)\tclExpr.obj \
	$(TMPDIR)\tclGet.obj \
	$(TMPDIR)\tclHash.obj \
	$(TMPDIR)\tclHistory.obj \
	$(TMPDIR)\tclInterp.obj \
	$(TMPDIR)\tclLink.obj \
	$(TMPDIR)\tclLoad.obj \
	$(TMPDIR)\tclParse.obj \
	$(TMPDIR)\tclProc.obj \
	$(TMPDIR)\tclUtil.obj \
	$(TMPDIR)\tclVar.obj \
	$(TMPDIR)\tclWin32Dll.obj \
	$(TMPDIR)\tclWinInit.obj \
	$(TMPDIR)\tclWinUtil.obj \
	$(TMPDIR)\tclWinError.obj

TCL16OBJS = $(TMPDIR)\tclWin16.obj

TCLLIB = tcl75.lib
TCLDLL = tcl75.dll
TCL16DLL = tcl1675.dll
TCLSH = tclsh75.exe
TCLTEST = tcltest.exe

#
# Targets
#

all:  cfgdll $(TCLDLL) cfg16dll $(TCL16DLL) cfgexe $(TCLSH) cfgcln
test: cfgdll $(TCLDLL) cfg16dll $(TCL16DLL) cfgtest $(TCLTEST) cfgcln

# Implicit Targets

.c.obj:
	@$(BCC32) {$< }

.dll.lib:
	$(IMPLIB) -c $@ $<

.rc.res:
	$(RC) -i$(INCLUDES) $<

#
# Special case object file targets
#

$(TMPDIR)\testMain.obj : $(ROOT)\win\winMain.c
	$(BCC32) -c -o$@ $(ROOT)\win\winMain.c

$(TMPDIR)\tclWin16.obj : $(ROOT)\win\tclWin16.c
	$(BCC) -c -o$@ $(ROOT)\win\tclWin16.c

#
# Configuration file targets - these files are implicitly used by the compiler
#

cfgdll:
	@$(CP) &&|
		-n$(TMPDIR) -I$(INCLUDES) -c -WD
		-D$(DEFINES) -3 -d -w $(PROJECTCCFLAGS)
| bcc32.cfg >NUL

cfg16dll:
	@$(CP) &&|
		-n$(TMPDIR) -I$(INCLUDES) -c -WD
		-D$(DEFINES) -3 -d -w $(PROJECTCCFLAGS)
| turboc.cfg >NUL


cfgexe:
	@$(CP) &&|
		-n$(TMPDIR) -I$(INCLUDES) -c -W
		-D$(DEFINES) -3 -d -w $(PROJECTCCFLAGS)
| bcc32.cfg >NUL

cfgtest:
	@$(CP) &&|
		-n$(TMPDIR) -I$(INCLUDES) -c -W
		-D$(DEFINES);TCL_TEST -3 -d -w $(PROJECTCCFLAGS)
| bcc32.cfg >NUL

cfgcln:
	@$(RM) bcc32.cfg turboc.cfg

#
# Executable targets
#

$(TCLDLL): $(TCLOBJS) tcl.def tcl.res
	tlink32 $(LNFLAGS_dll) @&&|
		$(TCLOBJS)
|, $@, -x, $(LNLIBS_dll), tcl.def, tcl.res

$(TCL16DLL) : $(TCL16OBJS) tcl16.rc
	$(RC16) -i$(INCLUDES) tcl16.rc
	tlink @&&|
		$(LNFLAGS16_dll) $(TCL16OBJS)
$@
-x
$(LNLIBS16_dll)
|, &&|
LIBRARY $&;dll
EXETYPE WINDOWS
CODE PRELOAD MOVEABLE DISCARDABLE
DATA PRELOAD MOVEABLE SINGLE
HEAPSIZE 1024
|, tcl16.res

$(TCLSH): $(TCLSHOBJS) $(TCLLIB)
	tlink32 $(LNFLAGS_exe) @&&|
		$(TCLSHOBJS)
|, $@, -x, $(LNLIBS_exe), &&|
EXETYPE WINDOWS
CODE PRELOAD MOVEABLE DISCARDABLE
DATA PRELOAD MOVEABLE MULTIPLE
|, 

$(TCLTEST): $(TCLTESTOBJS) $(TCLLIB)
	tlink32 $(LNFLAGS_exe) @&&|
		$(TCLTESTOBJS)
|, $@, -x, $(LNLIBS_exe), &&|
EXETYPE WINDOWS
CODE PRELOAD MOVEABLE DISCARDABLE
DATA PRELOAD MOVEABLE MULTIPLE
|, 

# The following rule automatically generates a tcl.def file containing
# an export entry for every public symbol in the tcl.dll library.

# This is pretty gross.  It takes the list of object files, converts 
# backslashes to forward slashes, and runs nm to generate a list of global
# symbols.  It then takes the third word on each line that is exporting a 
# public symbol and adds it to the exports file.  Finally, it uses the 
# exports file to construct the tcl.def file.

tcl.def: $(TCLOBJS)
 	tr \ / <&&|
		$(TCLOBJS)
| > .\files
	sh ./&&|
		xargs nm -g < ./files | awk '/ T / { print $3; }' >exports
|
	cat &&|
LIBRARY    $(TCLDLL)
EXETYPE WINDOWS
CODE PRELOAD MOVEABLE DISCARDABLE
DATA PRELOAD MOVEABLE MULTIPLE

EXPORTS
| exports >tcl.def
	$(RM) exports .\files


# the following two rules are a hack to get around the fact that the
# 16-bit compiler doesn't handle long file names :-(

$(ROOT)\win\tclWinIn.h: $(ROOT)\win\tclWinInt.h
	$(CP) $(ROOT)\win\tclWinInt.h $(ROOT)\win\tclWinIn.h

$(ROOT)\win\tclWin16.c: $(ROOT)\win\tclWinIn.h

# debugging rules, the .dll and .exe files must be in the same
# directory as the object files for debugging purposes

$(TMPDIR)\$(TCLDLL): $(TCLDLL)
	$(CP) $(TCLDLL) $(TMPDIR)

$(TMPDIR)\$(TCLSH): $(TCLSH)
	$(CP) $(TCLSH) $(TMPDIR)

$(TMPDIR)\$(TCLTEST): $(TCLTEST)
	$(CP) $(TCLTEST) $(TMPDIR)

debug: $(TMPDIR)\$(TCLDLL) $(TMPDIR)\$(TCLTEST)


# remove all generated files

clean:
	$(RM) $(TCLSH) $(TCLTEST) $(TCLLIB) $(TCLDLL) tcl.res
	$(RM) tcl16.lib $(TCL16DLL) $(ROOT)\win\tclWinIn.h tcl16.res
	$(RM) tcl.def
	$(RM) $(TMPDIR)\*.obj
	$(RM) turbo.cfg bcc32.cfg
