dnl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run during Tcl installation
dnl	to configure the system for the local environment.

dnl CYGNUS LOCAL, need 2.5 or higher for --bindir et al
AC_PREREQ(2.5)

AC_INIT(../generic/tcl.h)

AC_PROG_RANLIB
AC_PREFIX_PROGRAM(tclsh)

# CYGNUS LOCAL
CY_AC_C_WORKS
# END CYGNUS LOCAL
AC_PROG_CC
# CYGNUS LOCAL, set @INSTALL_PROGRAM@ et al in Makefile.in
AC_PROG_INSTALL

# CYGNUS LOCAL dje/win32
AR=${AR-ar}
AC_SUBST(AR)
# END CYGNUS LOCAL

#--------------------------------------------------------------------
# CYGNUS LOCAL:
# This is for LynxOS, which needs a flag to force true POSIX when
# building. It's weirder than that, cause the flag varies depending
# how old the compiler is. So...
# -X is for the old "cc" and "gcc" (based on 1.42)
# -mposix is for the new gcc (at least 2.5.8)
# This modifies the value of $CC to have the POSIX flag added
# so everything will configure correctly.
#--------------------------------------------------------------------
CY_AC_TCL_LYNX_POSIX

# CYGNUS LOCAL dje/win32
#--------------------------------------------------------------------
# Check if the environment has DOS style file names
# (drives in particular).
#--------------------------------------------------------------------
AC_CACHE_VAL(tcl_cv_sys_dospaths,[
AC_MSG_CHECKING([for DOS pathnames])
AC_TRY_COMPILE(,[
#ifndef _WIN32
}}}
#endif
], tcl_cv_sys_dospaths=yes, tcl_cv_sys_dospaths=no)])
if test x"$tcl_cv_sys_dospaths" = xyes ; then
   AC_MSG_RESULT(yes)
   AC_DEFINE(DOS_PATHNAMES)
else
   AC_MSG_RESULT(no)
fi

# Some functions for location independence.
AC_CHECK_FUNCS(realpath)
# Always define this, since we create a replacement function for it.
AC_DEFINE(HAVE_GETCWD)

# END CYGNUS LOCAL

#--------------------------------------------------------------------
#	Supply substitutes for missing POSIX library procedures, or
#	set flags so Tcl uses alternate procedures.
#--------------------------------------------------------------------

AC_REPLACE_FUNCS(getcwd opendir strstr)
AC_REPLACE_FUNCS(strtol tmpnam waitpid)
AC_CHECK_FUNC(strerror, , AC_DEFINE(NO_STRERROR))
AC_CHECK_FUNC(getwd, , AC_DEFINE(NO_GETWD))
AC_CHECK_FUNC(wait3, , AC_DEFINE(NO_WAIT3))
AC_CHECK_FUNC(uname, , AC_DEFINE(NO_UNAME))

#--------------------------------------------------------------------
#	On a few very rare systems, all of the libm.a stuff is
#	already in libc.a.  Set compiler flags accordingly.
#	Also, Linux requires the "ieee" library for math to work
#	right (and it must appear before "-lm").
#--------------------------------------------------------------------

AC_CHECK_FUNC(sin, MATH_LIBS="", MATH_LIBS="-lm")
AC_SUBST(MATH_LIBS)
AC_CHECK_LIB(ieee, main, [MATH_LIBS="-lieee $MATH_LIBS"])

#--------------------------------------------------------------------
#	Supply substitutes for missing POSIX header files.  Special
#	notes:
#	    - Sprite's dirent.h exists but is bogus.
#	    - stdlib.h doesn't define strtol, strtoul, or
#	      strtod insome versions of SunOS
#	    - some versions of string.h don't declare procedures such
#	      as strstr
#--------------------------------------------------------------------

AC_CHECK_HEADERS(unistd.h)

AC_MSG_CHECKING(dirent.h)
AC_CACHE_VAL(tcl_cv_header_dirent_h,[
AC_TRY_LINK([#include <sys/types.h>
#include <dirent.h>], [
#ifndef _POSIX_SOURCE
#   ifdef __Lynx__
	/*
	 * Generate compilation error to make the test fail:  Lynx headers
	 * are only valid if really in the POSIX environment.
	 */

	missing_procedure();
#   endif
#endif
DIR *d;
struct dirent *entryPtr;
char *p;
d = opendir("foobar");
entryPtr = readdir(d);
p = entryPtr->d_name;
closedir(d);
], tcl_cv_header_dirent_h=yes, tcl_cv_header_dirent_h=no)
AC_EGREP_HEADER([Sprite version.* NOT POSIX], dirent.h, tcl_cv_header_dirent_h=no)])
if test "$tcl_cv_header_dirent_h" = no; then
    AC_DEFINE(NO_DIRENT_H)
    AC_MSG_RESULT(no)
else
   AC_MSG_RESULT(yes)
fi

dnl this could be replaced by AC_HEADER_STDC, but it doesn't look
dnl for errno.h and limits.h
AC_CHECK_HEADER(errno.h, , AC_DEFINE(NO_ERRNO_H))
AC_CHECK_HEADER(float.h, , AC_DEFINE(NO_FLOAT_H))
AC_CHECK_HEADER(limits.h, , AC_DEFINE(NO_LIMITS_H))

dnl ac_cv_header_stdlib_h is the default name for the cache variable
dnl set from AC_CHECK_HEADER for this test
AC_CHECK_HEADER(stdlib.h)
tcl_cv_header_stdlib_h=$ac_cv_header_stdlib_h
if test x"$tcl_cv_header_stdlib_h" = x"yes" ; then
  AC_EGREP_HEADER(strtol,  stdlib.h, , tcl_cv_header_stdlib_h=no)
  AC_EGREP_HEADER(strtoul, stdlib.h, , tcl_cv_header_stdlib_h=no)
  AC_EGREP_HEADER(strtod,  stdlib.h, , tcl_cv_header_stdlib_h=no)
fi
if test x"$tcl_cv_header_stdlib_h" = x"no"; then
   AC_DEFINE(NO_STDLIB_H)
fi

dnl ac_cv_header_string_h is the default name for the cache variable
dnl set from AC_CHECK_HEADER for this test
AC_CHECK_HEADER(string.h)
tcl_cv_header_string_h=$ac_cv_header_string_h
if test x"$tcl_cv_header_string_h" = x"yes" ; then
  AC_EGREP_HEADER(strstr,   string.h, , tcl_cv_header_string_h=no)
  AC_EGREP_HEADER(strerror, string.h, , tcl_cv_header_string_h=no)
fi
if test x"$tcl_cv_c_string_h" = x"no" ; then
   AC_DEFINE(NO_STRING_H)
fi

AC_CHECK_HEADER(sys/time.h, , AC_DEFINE(NO_SYS_TIME_H))
AC_CHECK_HEADER(sys/wait.h, , AC_DEFINE(NO_SYS_WAIT_H))

#--------------------------------------------------------------------
#	On some systems strstr is broken: it returns a pointer even
#	even if the original string is empty.
#--------------------------------------------------------------------

AC_MSG_CHECKING([for a working strstr])
AC_CACHE_VAL(tcl_cv_func_strstr,[
AC_TRY_RUN([
extern int strstr();
int main()
{
  exit(strstr("\0test", "test") ? 1 : 0);
}], tcl_cv_func_strstr=yes , tcl_cv_func_strstr=no, tcl_cv_func_strstr=no)])
if test x"$tcl_cv_func_strstr" = x"no" ; then
  LIBOBJS="$LIBOBJS strstr.o"
  AC_MSG_RESULT(no)
else
  AC_MSG_RESULT(yes)
fi

#--------------------------------------------------------------------
#	Check for strtoul function.  This is tricky because under some
#	versions of AIX strtoul returns an incorrect terminator
#	pointer for the string "0".
#--------------------------------------------------------------------

AC_MSG_CHECKING([for a working strtoul])
AC_CACHE_VAL(tcl_cv_func_strtoul,[
AC_TRY_RUN([
extern int strtoul();
int main()
{
    char *string = "0";
    char *term;
    int value;
    value = strtoul(string, &term, 0);
    if ((value != 0) || (term != (string+1))) {
        exit(1);
    }
    exit(0);
}], tcl_cv_func_strtoul=yes, tcl_cv_func_strtoul=no, tcl_cv_func_strtoul=no)])
if test x"$tcl_cv_func_strtoul" = x"no" ; then
  LIBOBJS="$LIBOBJS strtoul.o"
  AC_MSG_RESULT(no)
else
  AC_MSG_RESULT(yes)
fi

#--------------------------------------------------------------------
#	Check for the strtod function.  This is tricky because in some
#	versions of Linux strtod mis-parses strings starting with "+".
#--------------------------------------------------------------------

AC_MSG_CHECKING([for a working strtod])
AC_CACHE_VAL(tcl_cv_func_strtod,[
AC_TRY_RUN([
extern double strtod();
int main()
{
    char *string = " +69";
    char *term;
    double value;
    value = strtod(string, &term);
    if ((value != 69) || (term != (string+4))) {
	exit(1);
    }
    exit(0);
}], tcl_cv_func_strtod=yes, tcl_cv_func_strtod=no, tcl_cv_func_strtod=no)])

#--------------------------------------------------------------------
#	Under Solaris 2.4, strtod returns the wrong value for the
#	terminating character under some conditions.  Check for this
#	and if the problem exists use a substitute procedure
#	"fixstrtod" that corrects the error.
#--------------------------------------------------------------------

if test x"$tcl_cv_func_strtod" = x"yes" ; then
    tcl_ok=0
    AC_TRY_RUN([
	extern double strtod();
	int main()
	{
	    char *string = "NaN";
	    char *term;
	    strtod(string, &term);
	    if ((term != string) && (term[-1] == 0)) {
		exit(1);
	    }
	    exit(0);
	}], , tcl_cv_func_strtod=buggy, tcl_cv_func_strtod=buggy)
fi

if test x"$tcl_cv_func_strtod" = xno ; then
   LIBOBJS="$LIBOBJS strtod.o"
   AC_MSG_RESULT(no)
else
   if test x"$tcl_cv_func_strtod" = xbuggy ; then
      AC_MSG_RESULT(buggy)
      LIBOBJS="$LIBOBJS fixstrtod.o"
      AC_DEFINE(strtod, fixstrtod)
   else
      AC_MSG_RESULT(ok)
   fi
fi

#--------------------------------------------------------------------
#	Check for various typedefs and provide substitutes if
#	they don't exist.
#--------------------------------------------------------------------

AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_UID_T

#--------------------------------------------------------------------
#	If a system doesn't have an opendir function (man, that's old!)
#	then we have to supply a different version of dirent.h which
#	is compatible with the substitute version of opendir that's
#	provided.  This version only works with V7-style directories.
#--------------------------------------------------------------------

AC_CHECK_FUNC(opendir, , AC_DEFINE(USE_DIRENT2_H))

#--------------------------------------------------------------------
#	The check below checks whether <sys/wait.h> defines the type
#	"union wait" correctly.  It's needed because of weirdness in
#	HP-UX where "union wait" is defined in both the BSD and SYS-V
#	environments.  Checking the usability of WIFEXITED seems to do
#	the trick.
#--------------------------------------------------------------------

AC_MSG_CHECKING([union wait])
AC_CACHE_VAL(tcl_cv_c_union_wait,[
AC_TRY_LINK([#include <sys/types.h> 
#include <sys/wait.h>], [
union wait x;
WIFEXITED(x);		/* Generates compiler error if WIFEXITED
			 * uses an int. */
], tcl_cv_c_union_wait=yes, tcl_cv_c_union_wait=no)])
if test x"$tcl_cv_c_union_wait" = xno; then
    AC_MSG_RESULT(no)
    AC_DEFINE(NO_UNION_WAIT)
else
    AC_MSG_RESULT(yes)
fi

#--------------------------------------------------------------------
#	Check to see whether the system supports the matherr function
#	and its associated type "struct exception".
#--------------------------------------------------------------------

AC_MSG_CHECKING([matherr support])
AC_CACHE_VAL(tcl_cv_c_matherr,[
AC_TRY_COMPILE([#include <math.h>], [
struct exception x;
x.type = DOMAIN;
x.type = SING;
], tcl_cv_c_matherr=yes, tcl_cv_c_matherr=no)])
if test x"$tcl_cv_c_matherr" = xyes; then
    AC_DEFINE(NEED_MATHERR)
    AC_MSG_RESULT(no)
else
    AC_MSG_RESULT(yes)
fi

#--------------------------------------------------------------------
#	Check to see whether the system provides a vfork kernel call.
#	If not, then use fork instead.  Also, check for a problem with
#	vforks and signals that can cause core dumps if a vforked child
#	resets a signal handler.  If the problem exists, then use fork
#	instead of vfork.
#--------------------------------------------------------------------

AC_CHECK_FUNC(vfork, tcl_ok=1, tcl_ok=0)
if test "$tcl_ok" = 1; then
    AC_MSG_CHECKING([vfork/signal bug]);
    AC_TRY_RUN([
	#include <stdio.h>
	#include <signal.h>
	#include <sys/wait.h>
	int gotSignal = 0;
	sigProc(sig)
	    int sig;
	{
	    gotSignal = 1;
	}
	main()
	{
	    int pid, sts;
	    (void) signal(SIGCHLD, sigProc);
	    pid = vfork();
	    if (pid <  0) {
		exit(1);
	    } else if (pid == 0) {
		(void) signal(SIGCHLD, SIG_DFL);
		_exit(0);
	    } else {
		(void) wait(&sts);
	    }
	    exit((gotSignal) ? 0 : 1);
	}], tcl_ok=1, tcl_ok=0, tcl_ok=0)
    if test "$tcl_ok" = 1; then
	AC_MSG_RESULT(ok)
    else
	AC_MSG_RESULT([buggy, using fork instead])
    fi
fi
rm -f core
if test "$tcl_ok" = 0; then
    AC_DEFINE(vfork, fork)
fi

#--------------------------------------------------------------------
#	Check whether there is an strncasecmp function on this system.
#	This is a bit tricky because under SCO it's in the socket
#	library.
#--------------------------------------------------------------------

AC_CHECK_FUNC(strncasecmp, ,
    AC_CHECK_LIB(socket, strncasecmp, , [LIBOBJS="$LIBOBJS strncasecmp.o"]))

#--------------------------------------------------------------------
#	The code below deals with several issues related to gettimeofday:
#	1. Some systems don't provide a gettimeofday function at all
#	   (set NO_GETTOD if this is the case).
#	2. SGI systems don't use the BSD form of the gettimeofday function,
#	   but they have a BSDgettimeofday function that can be used instead.
#	3. See if gettimeofday is declared in the <sys/time.h> header file.
#	   if not, set the GETTOD_NOT_DECLARED flag so that tclPort.h can
#	   declare it.
#--------------------------------------------------------------------

AC_CHECK_FUNC(BSDgettimeofday, AC_DEFINE(HAVE_BSDGETTIMEOFDAY),
	AC_CHECK_FUNC(gettimeofday, , AC_DEFINE(NO_GETTOD)))
AC_MSG_CHECKING([for gettimeofday declaration])
AC_EGREP_HEADER(gettimeofday, sys/time.h, AC_MSG_RESULT(present), [
    AC_MSG_RESULT(missing)
    AC_DEFINE(GETTOD_NOT_DECLARED)
])

#--------------------------------------------------------------------
#	The statements below define a collection of symbols related to
#	dynamic loading and shared libraries.  See Makefile.in for a
#	description of each of the symbols.
#--------------------------------------------------------------------

# Step 1: set the variable "system" to hold the name and version number
# for the system.  This can usually be done via the "uname" command, but
# there are a few systems, like Next, where this doesn't work.

AC_MSG_CHECKING([system version (for dynamic loading)])
if test -f /usr/lib/NextStep/software_version; then
  system=NEXTSTEP-`awk '/3/,/3/' /usr/lib/NextStep/software_version`
else
    system=`uname -s`-`uname -r`
    if test "$?" -ne 0 ; then
	AC_MSG_RESULT([unknown (can't find uname command)])
	system=unknown
    else
	# Special check for weird MP-RAS system (uname returns weird
	# results, and the version is kept in special file).
    
	if test -r /etc/.relid -a "X`uname -n`" = "X`uname -s`" ; then
	    system=MP-RAS-`awk '{print $3}' /etc/.relid'`
	fi
	AC_MSG_RESULT($system)
    fi
fi

# Step 2: check for existence of -ldl library.  This is needed because
# Linux can use either -ldl or -ldld for dynamic loading.

AC_CHECK_LIB(dl, dlopen, have_dl=yes, have_dl=no)

# Step 3: disable dynamic loading if requested via a command-line switch.

AC_ARG_ENABLE(load, [  --disable-load          disallow dynamic loading and "load" command],
    [tcl_ok=$enableval], [tcl_ok=yes])
if test "$tcl_ok" = "no"; then
    system=unknown
fi

# Step 4: set configuration options based on system name and version.

case $system in
    AIX-*)
	# Warning:  the AIX definitions have never been tested and I'm
	# pretty sure that they don't work as is.  This code is just
	# a starting point for a real implementation.
	# SHLIB_CFLAGS=""
	# SHLIB_LD="/bin/ld -e _nostart -berok  -bM:SRE -bE:lib$(LIBNAME).exp -H512 -T512"
	# SHLIB_SUFFIX=".so"
	# DL_OBJS="tclLoadNone.o"
	# DL_LIBS=""
	# LD_FLAGS=""
	echo "Dynamic loading isn't available yet under AIX."
	echo "Want to volunteer?"
	;;
    HP-UX-*.08.*|HP-UX-*.09.*|HP-UX-*.10.*)
        # CYGNUS LOCAL
        # gcc uses a different option than the native cc.
	if test $have_dl = yes ; then
	 case "$CC" in
	  *gcc*)
	    SHLIB_CFLAGS="-fpic"
	    SHLIB_LD="gcc -shared -fpic"
	    ;;
	  *)
	    SHLIB_CFLAGS="+z"
	    SHLIB_LD="ld -b"
	    ;;
	  esac
	 SHLIB_SUFFIX=".sl"
	 DL_OBJS="tclLoadShl.o"
         DL_LIBS="-ldld"
	fi

	# CYGNUS LOCAL: The GNU linker requires the -export-dynamic
	# option to make all symbols visible in the dynamic symbol
	# table.
	hold_ldflags=$LDFLAGS
	AC_MSG_CHECKING(for the ld -export-dynamic flag)
	LDFLAGS="${LDFLAGS} -Wl,-export-dynamic"
	AC_TRY_LINK(, [int i;], found=yes, found=no)
	LDFLAGS=$hold_ldflags
	AC_MSG_RESULT($found)
	if test $found = yes; then
	  LD_FLAGS="-Wl,-export-dynamic"
	else
	  LD_FLAGS="-Wl,-E"
	fi
	# END CYGNUS LOCAL
	;;
    IRIX-4.*)
	SHLIB_CFLAGS="-G0"
	SHLIB_LD="echo tclLdAout | tclsh -r -G 0"
	SHLIB_SUFFIX="..o"
	DL_OBJS="tclLoadAout.o"
	DL_LIBS=""
	LD_FLAGS="-D 08000000"
	;;
    IRIX-5.*)
	SHLIB_CFLAGS=""
	SHLIB_LD="ld -shared -rdata_shared"
	SHLIB_SUFFIX=".so"
	DL_OBJS="tclLoadDl.o"
	DL_LIBS=""
	LD_FLAGS=""
	;;
    Linux*)
	SHLIB_CFLAGS="-fpic"
	SHLIB_SUFFIX=".so"
	if test "$have_dl" = yes; then
	    SHLIB_LD="${CC} -shared"
	    DL_OBJS="tclLoadDl.o"
	    DL_LIBS="-ldl"
	    LD_FLAGS="-rdynamic"
	else
	    AC_HAVE_HEADERS(dld.h)
	    if test "$ac_cv_header_dld_h" = yes; then
	        SHLIB_LD="ld -shared"
		DL_OBJS="tclLoadDld.o"
		DL_LIBS="-ldld"
		LD_FLAGS=""
	    fi
	fi
	;;
    MP-RAS-02*)
	SHLIB_CFLAGS="-K PIC"
	SHLIB_LD="cc -G"
	SHLIB_SUFFIX=".so"
	DL_OBJS="tclLoadDl.o"
	DL_LIBS="-ldl"
	LD_FLAGS=""
	;;
    MP-RAS-*)
	SHLIB_CFLAGS="-K PIC"
	SHLIB_LD="cc -G"
	SHLIB_SUFFIX=".so"
	DL_OBJS="tclLoadDl.o"
	DL_LIBS="-ldl"
	LD_FLAGS="-Wl,-Bexport"
	;;
    NetBSD-*|FreeBSD-*)
	# Not available on all versions:  check for include file.
	if test -e /usr/include/dlfcn.h; then
	    SHLIB_CFLAGS="-fpic"
	    SHLIB_LD="ld -Bshareable"
	    SHLIB_SUFFIX=".so"
	    DL_OBJS="tclLoadDl2.o"
	    DL_LIBS=""
	    LD_FLAGS=""
	else
	    SHLIB_CFLAGS=""
	    SHLIB_LD="echo tclLdAout | tclsh -r"
	    SHLIB_SUFFIX="..o"
	    DL_OBJS="tclLoadAout.o"
	    DL_LIBS=""
	    LD_FLAGS=""
	fi
	;;
    NEXTSTEP-*)
	SHLIB_CFLAGS=""
	SHLIB_LD="cc -nostdlib -r"
	SHLIB_SUFFIX=".so"
	DL_OBJS="tclLoadNext.o"
	DL_LIBS=""
	LD_FLAGS=""
	;;
    OSF-1.*)
	SHLIB_CFLAGS="-fpic"
	SHLIB_LD='ld -shared -expect_unresolved "*"'
	SHLIB_SUFFIX=".so"
	DL_OBJS="tclLoadDl.o"
	DL_LIBS=""
	LD_FLAGS=""
	;;
    OSF1-V*)
	SHLIB_CFLAGS=""
	SHLIB_LD='ld -shared -expect_unresolved "*"'
	SHLIB_SUFFIX=".so"
	DL_OBJS="tclLoadDl.o"
	DL_LIBS=""
	LD_FLAGS=""
	;;
    RISCos-*)
	SHLIB_CFLAGS="-G0"
	SHLIB_LD="echo tclLdAout | tclsh -r -G 0"
	SHLIB_SUFFIX="..o"
	DL_OBJS="tclLoadAout.o"
	DL_LIBS=""
	LD_FLAGS="-D 08000000"
	;;
    SCO_SV-3.2*)
        # Note, dlopen is available only on SCO 3.2.5 and greater.  However,
        # this test works, since "uname -s" was non-standard in 3.2.4 and
        # below.
	SHLIB_CFLAGS="-Kpic -belf"
	SHLIB_LD="ld -G -z text"
	SHLIB_SUFFIX=".so"
	DL_OBJS="tclLoadDl.o"
	DL_LIBS=""
	LD_FLAGS="-belf -Wl,-Bexport"
	;;
    SunOS-4*)
        # CYGNUS LOCAL
        # gcc uses a different option than the native cc.
        case "$CC" in
	  *gcc*)
	    SHLIB_CFLAGS="-fpic"
	    SHLIB_LD="gcc -shared -fpic"
	    ;;
	  *)
	    SHLIB_CFLAGS="-pic"
	    SHLIB_LD="/usr/bin/ld -assert pure-text"
	    ;;
	 esac
	 SHLIB_SUFFIX=".so"
	 DL_OBJS="tclLoadDl.o"
	 DL_LIBS="-ldl"
	 LD_FLAGS=""
	;;
    SunOS-5*)
        # CYGNUS LOCAL
        # gcc uses a different option than the native cc.
        case "$CC" in
	  *gcc*)
	    SHLIB_CFLAGS="-fpic"
	    SHLIB_LD="gcc -shared -fpic"
	    ;;
	  *)
	    SHLIB_CFLAGS="-K pic"
	    SHLIB_LD="/usr/ccs/bin/ld -G -z text"
	    ;;
	esac
	SHLIB_SUFFIX=".so"
	DL_OBJS="tclLoadDl.o"
	DL_LIBS="-ldl"
	# CYGNUS LOCAL: The GNU linker requires the -export-dynamic
	# option to make all symbols visible in the dynamic symbol
	# table.
	hold_ldflags=$LDFLAGS
	AC_MSG_CHECKING(for the ld -export-dynamic flag)
	LDFLAGS="${LDFLAGS} -Wl,-export-dynamic"
	AC_TRY_LINK(, [int i;], found=yes, found=no)
	LDFLAGS=$hold_ldflags
	AC_MSG_RESULT($found)
	if test $found = yes; then
	  LD_FLAGS="-Wl,-export-dynamic"
	else
	  LD_FLAGS=""
	fi
	;;
    ULTRIX-4.*)
	SHLIB_CFLAGS="-G0"
	SHLIB_LD="echo tclLdAout | tclsh -r -G 0"
	SHLIB_SUFFIX="..o"
	DL_OBJS="tclLoadAout.o"
	DL_LIBS=""
	LD_FLAGS="-D 08000000"
	;;
    UNIX_SV*)
	SHLIB_CFLAGS="-K PIC"
	SHLIB_LD="cc -G"
	SHLIB_SUFFIX=".so"
	DL_OBJS="tclLoadDl.o"
	DL_LIBS="-ldl"
	# CYGNUS LOCAL fnf
	# Some UNIX_SV* systems (unixware 1.1.2 for example) have linkers
	# that don't grok the -Bexport option.  Test that it does.
	hold_ldflags=$LDFLAGS
	AC_MSG_CHECKING(for ld accepts -Bexport flag)
	LDFLAGS="${LDFLAGS} -Wl,-Bexport"
	AC_TRY_LINK(, [int i;], found=yes, found=no)
	LDFLAGS=$hold_ldflags
	AC_MSG_RESULT($found)
	if test $found = yes; then
	  LD_FLAGS="-Wl,-Bexport"
	else
	  LD_FLAGS=""
	fi
	# END CYGNUS LOCAL
	;;
esac

# The following magic was provided by Kevin Kenny to implement
# pseudo-static linking as a form of dynamic loading (e.g. for old
# Ultrix and other systems).  You'll have to ask him to explain
# what this code does.

if test "x$DL_OBJS" = "xtclLoadAout.o" ; then
    AC_MSG_CHECKING(sys/exec.h)
    AC_TRY_COMPILE([#include <sys/exec.h>],[
	struct exec foo;
	unsigned long seek;
	int flag;
#ifdef __mips
	seek = N_TXTOFF (foo.ex_f, foo.ex_o);
#else
	seek = N_TXTOFF (foo);
#endif
	flag = (foo.a_magic == OMAGIC);
	return foo.a_text + foo.a_data + foo.a_bss + foo.a_entry;
], tcl_ok=usable, tcl_ok=unusable)
    AC_MSG_RESULT($tcl_ok)
    if test $tcl_ok = usable; then
	AC_DEFINE(USE_SYS_EXEC_H)
    else
	AC_MSG_CHECKING(a.out.h)
	AC_TRY_COMPILE([#include <a.out.h>],[
   struct exec foo;
   unsigned long seek;
	    int flag;
#ifdef __mips
	    seek = N_TXTOFF (foo.ex_f, foo.ex_o);
#else
	    seek = N_TXTOFF (foo);
#endif
	    flag = (foo.a_magic == OMAGIC);
	    return foo.a_text + foo.a_data + foo.a_bss + foo.a_entry;
], tcl_ok=usable, tcl_ok=unusable)
	AC_MSG_RESULT($tcl_ok)
	if test $tcl_ok = usable; then
	    AC_DEFINE(USE_A_OUT_H)
	else
	    DL_OBJS=""
	fi
    fi
fi

if test "x$DL_OBJS" != "x" ; then
    BUILD_DLTEST="loadTests"
else
    echo "Can't figure out how to do dynamic loading or shared libraries"
    echo "on this system."
    SHLIB_CFLAGS=""
    SHLIB_LD=""
    SHLIB_SUFFIX=""
    DL_OBJS="tclLoadNone.o"
    DL_LIBS=""
    LD_FLAGS=""
    BUILD_DLTEST=""
fi

if test "$CC" = "gcc" -a "$DL_OBJS" != "tclLoadNone.o" ; then
    SHLIB_CFLAGS="-fpic"
fi

AC_SUBST(SHLIB_CFLAGS)
AC_SUBST(SHLIB_LD)
AC_SUBST(SHLIB_SUFFIX)
AC_SUBST(DL_OBJS)
AC_SUBST(DL_LIBS)
AC_SUBST(LD_FLAGS)
AC_SUBST(BUILD_DLTEST)

AC_OUTPUT(Makefile dltest/Makefile)
