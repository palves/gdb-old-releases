#
# Makefile for directory with subdirs to build.
#   Copyright (C) 1990, 1991 Cygnus Support
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
#
# Last Mod Thu Oct 10 00:24:41 PDT 1991, by rich@cygnus.com
#
# $Id: Makefile.in,v 1.43 1991/10/16 19:54:30 gnu Exp $

srcdir = .
destdir = /usr/local

SHELL=/bin/sh

#CC = gcc -b$(target) # -B$(srcdir)/../gas/Host-$(host)/Target-$(target)/
#CFLAGS = -g -nostdinc -nostdlib -I- -I/usr/local/lib/gcc/$(target)/1.92/include -I$(srcdir) -I$(srcdir)/../include -I$(OSINCLUDE)

RANLIB = ranlib
AR = ar
AR_FLAGS = cq
BISONPATH = 

BISON = `if [ -d $(unsubdir)/../bison ] ; \
	then echo \`pwd\`/$(unsubdir)/../bison$(subdir)/bison -L \`pwd\`/$(unsubdir)/../bison/ ; \
	else echo yacc ; fi`

SUBDIRS = libiberty readline bfd gdb binutils ld gas gcc gnulib
OTHERS = 

#### host and target specific makefile fragments come in here.
###

all:
	$(MAKE) subdir_do DO=all "DODIRS=$(SUBDIRS) $(OTHERS)"

subdir_do: force
	for i in $(DODIRS); do \
		if [ -d $(unsubdir)/$$i -o -d $(unsubdir)/$$i.$(target) ] ; then \
			if (cd $(unsubdir)/$$i`if [ -d $(unsubdir)/$$i.$(target) ] ; \
				then echo .$(target) ; fi`$(subdir); \
				$(MAKE) \
					"against=$(against)" \
					"AR=$(AR)" \
					"CC=$(CC)" \
					"AR_FLAGS=$(AR_FLAGS)" \
					"RANLIB=$(RANLIB)" \
					"LOADLIBES=$(LOADLIBES)" \
					"LDFLAGS=$(LDFLAGS)" \
					"BISON=$(BISON)" $(DO)) ; then true ; \
			else exit 1 ; fi ; \
		else true ; fi ; \
	done

bootstrap:
	$(MAKE) all
	$(MAKE) stage1
	$(MAKE) pass "stagepass=stage1"
	$(MAKE) stage2
	$(MAKE) pass "stagepass=stage2"
	$(MAKE) comparison

bootstrap2:
	$(MAKE) pass "stagepass=stage1"
	$(MAKE) stage2
	$(MAKE) pass "stagepass=stage2"
	$(MAKE) comparison

bootstrap3:
	$(MAKE) pass "stagepass=stage2"
	$(MAKE) comparison

pass:
	cp $(unsubdir)/gcc`if [ -d $(unsubdir)/gcc.$(target) ] ; \
                then echo .$(target) ; fi`/gstdarg.h $(unsubdir)/gas/stdarg.h
	$(MAKE) subdir_do DO=all "DODIRS=$(SUBDIRS)" \
		"CC=`pwd`/$(unsubdir)/gcc`if [ -d $(unsubdir)/gcc.$(target) ] ; \
		then echo .$(target) ; fi`$(subdir)/$(stagepass)/gcc \
		-O \
		-B`pwd`/$(unsubdir)/gcc`if [ -d $(unsubdir)/gcc.$(target) ] ; \
		then echo .$(target) ; fi`$(subdir)/$(stagepass)/ \
		-B`pwd`/$(unsubdir)/gas`if [ -d $(unsubdir)/gas.$(target) ] ; \
		then echo .$(target) ; fi`$(subdir)/$(stagepass)/ \
		-B`pwd`/$(unsubdir)/ld`if [ -d $(unsubdir)/ld.$(target) ] ; \
		then echo .$(target) ; fi`$(subdir)/$(stagepass)/" \
		"AR=`pwd`/$(unsubdir)/binutils`if [ -d $(unsubdir)/binutils.$(target) ] ; \
		then echo .$(target) ; fi`$(subdir)/$(stagepass)/ar" \
		"RANLIB=`pwd`/$(unsubdir)/binutils`if [ -d $(unsubdir)/binutils.$(target) ] ; \
		then echo .$(target) ; fi`$(subdir)/$(stagepass)/ranlib" \
		"LOADLIBES=`pwd`/$(unsubdir)/gnulib`if [ -d $(unsubdir)/binutils.$(target) ] ; \
		then echo .$(target) ; fi`$(subdir)/$(stagepass)/gnulib.a /lib/libc.a" \
		"LDFLAGS=-nostdlib /lib/crt0.o \
		-L`pwd`/$(unsubdir)/gnulib`if [ -d $(unsubdir)/gnulib.$(target) ] ; \
		then echo .$(target) ; fi`$(subdir)/$(stagepass)/ \
		-B`pwd`/$(unsubdir)/ld`if [ -d $(unsubdir)/ld.$(target) ] ; \
		then echo .$(target) ; fi`$(subdir)/$(stagepass)/"


stage1:
	$(MAKE) subdir_do DO=stage1 "DODIRS=$(SUBDIRS)"

stage2:
	$(MAKE) subdir_do DO=stage2 "DODIRS=$(SUBDIRS)"

stage3:
	$(MAKE) subdir_do DO=stage3 "DODIRS=$(SUBDIRS)"

stage4:
	$(MAKE) subdir_do DO=stage4 "DODIRS=$(SUBDIRS)"

against=stage2

comparison:; $(MAKE) subdir_do DO=comparison against=$(against) "DODIRS=$(SUBDIRS)"

de-stage1:; $(MAKE) subdir_do DO=de-stage1 "DODIRS=$(SUBDIRS)"
de-stage2:; $(MAKE) subdir_do DO=de-stage2 "DODIRS=$(SUBDIRS)"
de-stage3:; $(MAKE) subdir_do DO=de-stage3 "DODIRS=$(SUBDIRS)"
de-stage4:; $(MAKE) subdir_do DO=de-stage4 "DODIRS=$(SUBDIRS)"

clean:
	rm -rf *.a TEMP errs core *.o *~ \#* TAGS *.E
	$(MAKE) subdir_do DO=clean "DODIRS=$(SUBDIRS) $(OTHERS)"

install: install-dirs install-fixed-includes
	$(MAKE) subdir_do DO=install "DODIRS=$(SUBDIRS) $(OTHERS)"

# The "else true" stuff is for Ultrix; the shell returns the exit code
# of the "if" command, if no commands are run in the "then" or "else" part,
# causing Make to quit.
install-dirs: force
	- mkdir $(destdir)
	- mkdir $(destdir)/H-$(host_alias)
	- mkdir $(destdir)/H-$(host_alias)/T-independent
	- mkdir $(destdir)/H-$(host_alias)/T-independent/bin
	- mkdir $(destdir)/H-$(host_alias)/T-independent/lib
	- mkdir $(destdir)/H-$(host_alias)/T-$(target_alias)
	- mkdir $(destdir)/H-$(host_alias)/T-$(target_alias)/bin
	- mkdir $(destdir)/H-$(host_alias)/T-$(target_alias)/lib
	- mkdir $(destdir)/H-independent
	- mkdir $(destdir)/H-independent/include
	- mkdir $(destdir)/H-independent/doc
	- mkdir $(destdir)/H-independent/man
	- mkdir $(destdir)/H-independent/man/man1
	- mkdir $(destdir)/H-independent/man/man2
	- mkdir $(destdir)/H-independent/man/man3
	- mkdir $(destdir)/H-independent/man/man4
	- mkdir $(destdir)/H-independent/man/man5
	- mkdir $(destdir)/H-independent/man/man6
	- mkdir $(destdir)/H-independent/man/man7
	- mkdir $(destdir)/H-independent/man/man8
	if [ -d $(unsubdir)/gcc`if [ -d $(unsubdir)/gcc.$(target) ] ; \
                then echo .$(target) ; fi`$(subdir) ] ; then \
		(cd  $(unsubdir)/gcc`if [ -d $(unsubdir)/gcc.$(target) ] ; \
	                then echo .$(target) ; fi`$(subdir) ; \
				$(MAKE) install-dir) ; \
	else true; \
	fi

install-fixed-includes: force
	if [ -d $(unsubdir)/gcc`if [ -d $(unsubdir)/gcc.$(target) ] ; \
                then echo .$(target) ; fi`$(subdir) ] ; then \
		(cd  $(unsubdir)/gcc`if [ -d $(unsubdir)/gcc.$(target) ] ; \
	                then echo .$(target) ; fi`$(subdir) ; \
				$(MAKE) install-fixed-includes) ; \
	else true; \
	fi

etags tags: TAGS

TAGS: FORCE
	etags `$(MAKE) ls`

ls:
	@echo Makefile
	@for i in $(SUBDIRS); \
	do \
		(cd $$i; \
			pwd=`pwd`; \
			wd=`basename $$pwd`; \
			for j in `$(MAKE) ls`; \
			do \
				echo $$wd/$$j; \
			done) \
	done

force:

# with the gnu make, this is done automatically.

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

#
# Build GDB distributions that contain BFD, Include, Libiberty, Readline, etc

DEVO_SUPPORT= README README.configure Makefile.in configure configure.in \
	config.sub config
GDB_SUPPORT_DIRS= bfd include libiberty readline
GDB_SUPPORT_FILES= $(GDB_SUPPORT_DIRS) texinfo/fsf/texinfo.tex

setup-dirs: force_update
	./configure sun4
	make clean
	./configure -rm sun4
	chmod og=u `find $(DEVO_SUPPORT) $(GDB_SUPPORT_FILES) -print`

bfd.ilrt.tar.Z: setup-dirs
	rm -f bfd.ilrt.tar.Z
	tar cf - $(DEVO_SUPPORT) $(GDB_SUPPORT_FILES) \
		| compress -v >bfd.ilrt.tar.Z

gdb.tar.Z: setup-dirs
	(cd gdb; $(MAKE) -f Makefile.in make-proto-gdb.dir)
	$(MAKE) $(MFLAGS) -f Makefile.in make-gdb.tar.Z

make-gdb.tar.Z: $(DEVO_SUPPORT) $(GDB_SUPPORT_DIRS) gdb texinfo/fsf/texinfo.tex
	rm -rf proto-toplev; mkdir proto-toplev
	ln -s ../gdb/proto-gdb.dir proto-toplev/gdb
	(cd proto-toplev; for i in $(DEVO_SUPPORT) $(GDB_SUPPORT_DIRS); do \
		ln -s ../$$i . ; \
	done)
	mkdir proto-toplev/texinfo
	mkdir proto-toplev/texinfo/fsf
	ln -s ../../../texinfo/fsf/texinfo.tex proto-toplev/texinfo/fsf/
	chmod og=u `find proto-toplev -print`
	(VER=`sed <gdb/Makefile.in -n 's/VERSION = //p'`; \
		echo "==> Making gdb-$$VER.tar.Z"; \
		ln -s proto-toplev gdb-$$VER; \
		tar cfh - gdb-$$VER \
		| compress -v >gdb-$$VER.tar.Z)

force_update:

# end of Makefile.in
