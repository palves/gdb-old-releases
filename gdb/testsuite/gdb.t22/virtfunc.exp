# Copyright (C) 1992 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@prep.ai.mit.edu

# This file was written by Fred Fish. (fnf@cygnus.com)

if $tracelevel then {
	strace $tracelevel
}

#
#  Test printing of the types of various classes.
#

proc test_ptype_of_classes {} {
    global prompt

    set passcount 0

    send "ptype VA\n"
# This used to be a fail if it printed "struct" not "class".  But
# since this struct doesn't use any special C++ features, it is
# considered right for GDB to print it as "struct".
    expect {
	-re "type = (class|struct) VA \{\[\r\n\t \]*\
int va;\r\n\}\r\n$prompt $" {
	    incr passcount
	}
	-re ".*$prompt $" { fail "ptype VA" }
	timeout { fail "ptype VA (timeout)" }
    }

    send "ptype VB\n"
    expect {
	-re "type = class VB \{\[\r\n\t \]*public:\[\r\n\t \]*int vb;\[\r\n\t \]*int fvb\(void\);\[\r\n\t \]*virtual int vvb\(void\);\r\n\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct VB \{\[\r\n\t \]*int vb;\[\r\n\t \]*\}\r\n$prompt $" {
	    fail "ptype VB"
	}
	-re ".*$prompt $" { fail "ptype VB" }
	timeout { fail "ptype VB (timeout)" }
    }

    send "ptype V\n"
    expect {
	-re "type = class V : public VA, public VB \{\[\r\n\t \]*public:\[\r\n\t \]*int w;\[\r\n\t \]*int f\(void\);\[\r\n\t \]*virtual int vv\(void\);\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct V \{\[\r\n \t\]*struct VA VA;\[\r\n \t\]*struct VB VB;\[\r\n \t\]*int w;\[\r\n \t\]*\}\r\n$prompt $" {
	    fail "ptype V"
	}
	-re ".*$prompt $" { fail "ptype V" }
	timeout { fail "ptype V (timeout)" }
    }

    send "ptype A\n"
    expect {
	-re "type = class A : public virtual V \{\[\r\n\t \]*private:\[\r\n\t \]*V \*_vb\\\$V;\[\r\n\t \]*int a;\[\r\n\t \]*public:\[\r\n\t \]*virtual int f\(void\);\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct A \{\[\r\n \t\]*struct V V;\[\r\n \t\]*struct V \*_vb\\\$V;\[\r\n \t\]*int a;\[\r\n \t\]*\}\r\n$prompt $" {
	    fail "ptype A"
	}
	-re ".*$prompt $" { fail "ptype A" }
	timeout { fail "ptype A (timeout)" }
    }

    send "ptype B\n"
    expect {
	-re "type = class B : public A \{\[\r\n\t \]*private:\[\r\n\t \]*int b;\[\r\n\t \]*public:\[\r\n\t \]*virtual int f\(void\);\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct B \{\[\r\n \t\]*struct A A;\[\r\n \t\]*int b;\[\r\n \t\]*\}\r\n$prompt $" {
	    fail "ptype B"
	}
	-re ".*$prompt $" { fail "ptype B" }
	timeout { fail "ptype B (timeout)" }
    }

    send "ptype C\n"
    expect {
	-re "type = class C : public virtual V \{\[\r\n\t \]*private:\[\r\n\t \]*V \*_vb\\\$V;\[\r\n\t \]*public:\[\r\n\t \]*int c;\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct C \{\[\r\n \t\]*struct V V;\[\r\n \t\]*struct V \*_vb\\\$V;\[\r\n \t\]*int c;\[\r\n \t\]*\}\r\n$prompt $" {
	    fail "ptype C"
	}
	-re ".*$prompt $" { fail "ptype C" }
	timeout { fail "ptype C (timeout)" }
    }

    send "ptype AD\n"
    expect {
	-re "type = class AD \{\[\r\n\t \]*public:\[\r\n\t \]*virtual int vg\(void\);\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct AD \{\r\n\}\r\n$prompt $" {
	    fail "ptype AD"
	}
	-re ".*$prompt $" { fail "ptype AD" }
	timeout { fail "ptype AD (timeout)" }
    }

    send "ptype D\n"
    expect {
	-re "type = class D : public AD, public virtual V \{\[\r\n\t \]*private:\[\r\n\t \]*V \*_vb\\\$V;\[\r\n\t \]*public:\[\r\n\t \]*int d;\[\r\n\t \]*static void s\(void\);\[\r\n\t \]*virtual int vg\(void\);\[\r\n\t \]*virtual int vd\(void\);\[\r\n\t \]*int fd\(void\);\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct D \{\[\r\n\t \]*struct AD AD;\[\r\n\t \]*struct V V;\[\r\n\t \]*struct V \*_vb\\\$V;\[\r\n\t \]*int d;\[\r\n\t \]*\}\r\n$prompt $" {
	    fail "ptype D"
	}
	-re ".*$prompt $" { fail "ptype D" }
	timeout { fail "ptype D (timeout)" }
    }

    send "ptype E\n"
    expect {
	-re "type = class E : public B, public virtual V, public D, public C \{\[\r\n\t \]*public:\[\r\n\t \]*int e;\[\r\n\t \]*virtual int f\(void\);\[\r\n\t \]*virtual int vg\(void\);\[\r\n\t \]*virtual int vv\(void\);\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct E \{\[\r\n\t \]*struct B B;\[\r\n\t \]*struct V V;\[\r\n\t \]*struct D D;\[\r\n\t \]*struct C C;\[\r\n\t \]*int e;\[\r\n\t \]*\}\r\n$prompt $" {
	    fail "ptype E"
	}
	-re ".*$prompt $" { fail "ptype E" }
	timeout { fail "ptype E (timeout)" }
    }

    send "ptype dd\n"
    expect {
	-re "type = class D : public AD, public virtual V \{\[\r\n\t \]*private:\[\r\n\t \]*V \*_vb\\\$V;\[\r\n\t \]*public:\[\r\n\t \]*int d;\[\r\n\t \]*static void s\(void\);\[\r\n\t \]*virtual int vg\(void\);\[\r\n\t \]*virtual int vd\(void\);\[\r\n\t \]*int fd\(void\);\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct D \{\[\r\n\t \]*struct AD AD;\[\r\n\t \]*struct V V;\[\r\n\t \]*struct V \*_vb\\\$V;\[\r\n\t \]*int d;\[\r\n\t \]*\}\r\n$prompt $" {
	    fail "ptype dd"
	}
	-re ".*$prompt $" { fail "ptype dd" }
	timeout { fail "ptype dd (timeout)" }
    }

    send "ptype ppd\n"
    expect {
	-re "type = class D : public AD, public virtual V \{\[\r\n\t \]*private:\[\r\n\t \]*V \*_vb\\\$V;\[\r\n\t \]*public:\[\r\n\t \]*int d;\[\r\n\t \]*static void s\(void\);\[\r\n\t \]*virtual int vg\(void\);\[\r\n\t \]*virtual int vd\(void\);\[\r\n\t \]*int fd\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct D \{\[\r\n\t \]*struct AD AD;\[\r\n\t \]*struct V V;\[\r\n\t \]*struct V \*_vb\\\$V;\[\r\n\t \]*int d;\[\r\n\t \]*\} \*\r\n$prompt $" {
	    fail "ptype ppd"
	}
	-re ".*$prompt $" { fail "ptype ppd" }
	timeout { fail "ptype ppd (timeout)" }
    }

    send "ptype pAd\n"
    expect {
	-re "type = class AD \{\[\r\n\t \]*public:\[\r\n\t \]*virtual int vg\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct AD \{\r\n\} \*\r\n$prompt $" {
	    fail "ptype pAd"
	}
	-re ".*$prompt $" { fail "ptype pAd" }
	timeout { fail "ptype pAd (timeout)" }
    }

    send "ptype a\n"
    expect {
	-re "type = class A : public virtual V \{\[\r\n\t \]*private:\[\r\n\t \]*V \*_vb\\\$V;\[\r\n\t \]*int a;\[\r\n\t \]*public:\[\r\n\t \]*virtual int f\(void\);\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct A \{\[\r\n \t\]*struct V V;\[\r\n \t\]*struct V \*_vb\\\$V;\[\r\n \t\]*int a;\[\r\n \t\]*\}\r\n$prompt $" {
	    fail "ptype a"
	}
	-re ".*$prompt $" { fail "ptype a" }
	timeout { fail "ptype a (timeout)" }
    }

    send "ptype b\n"
    expect {
	-re "type = class B : public A \{\[\r\n\t \]*private:\[\r\n\t \]*int b;\[\r\n\t \]*public:\[\r\n\t \]*virtual int f\(void\);\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct B \{\[\r\n \t\]*struct A A;\[\r\n \t\]*int b;\[\r\n \t\]*\}\r\n$prompt $" {
	    fail "ptype b"
	}
	-re ".*$prompt $" { fail "ptype b" }
	timeout { fail "ptype b (timeout)" }
    }

    send "ptype c\n"
    expect {
	-re "type = class C : public virtual V \{\[\r\n\t \]*private:\[\r\n\t \]*V \*_vb\\\$V;\[\r\n\t \]*public:\[\r\n\t \]*int c;\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct C \{\[\r\n \t\]*struct V V;\[\r\n \t\]*struct V \*_vb\\\$V;\[\r\n \t\]*int c;\[\r\n \t\]*\}\r\n$prompt $" {
	    fail "ptype c"
	}
	-re ".*$prompt $" { fail "ptype c" }
	timeout { fail "ptype c (timeout)" }
    }

    send "ptype d\n"
    expect {
	-re "type = class D : public AD, public virtual V \{\[\r\n\t \]*private:\[\r\n\t \]*V \*_vb\\\$V;\[\r\n\t \]*public:\[\r\n\t \]*int d;\[\r\n\t \]*static void s\(void\);\[\r\n\t \]*virtual int vg\(void\);\[\r\n\t \]*virtual int vd\(void\);\[\r\n\t \]*int fd\(void\);\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct D \{\[\r\n\t \]*struct AD AD;\[\r\n\t \]*struct V V;\[\r\n\t \]*struct V \*_vb\\\$V;\[\r\n\t \]*int d;\[\r\n\t \]*\}\r\n$prompt $" {
	    fail "ptype d"
	}
	-re ".*$prompt $" { fail "ptype d" }
	timeout { fail "ptype d (timeout)" }
    }

    send "ptype e\n"
    expect {
	-re "type = class E : public B, public virtual V, public D, public C \{\[\r\n\t \]*public:\[\r\n\t \]*int e;\[\r\n\t \]*virtual int f\(void\);\[\r\n\t \]*virtual int vg\(void\);\[\r\n\t \]*virtual int vv\(void\);\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct E \{\[\r\n\t \]*struct B B;\[\r\n\t \]*struct V V;\[\r\n\t \]*struct D D;\[\r\n\t \]*struct C C;\[\r\n\t \]*int e;\[\r\n\t \]*\}\r\n$prompt $" {
	    fail "ptype e"
	}
	-re ".*$prompt $" { fail "ptype e" }
	timeout { fail "ptype e (timeout)" }
    }

    send "ptype v\n"
    expect {
	-re "type = class V : public VA, public VB \{\[\r\n\t \]*public:\[\r\n\t \]*int w;\[\r\n\t \]*int f\(void\);\[\r\n\t \]*virtual int vv\(void\);\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct V \{\[\r\n \t\]*struct VA VA;\[\r\n \t\]*struct VB VB;\[\r\n \t\]*int w;\[\r\n \t\]*\}\r\n$prompt $" {
	    fail "ptype v"
	}
	-re ".*$prompt $" { fail "ptype v" }
	timeout { fail "ptype v (timeout)" }
    }

    send "ptype vb\n"
    expect {
	-re "type = class VB \{\[\r\n\t \]*public:\[\r\n\t \]*int vb;\[\r\n\t \]*int fvb\(void\);\[\r\n\t \]*virtual int vvb\(void\);\[\r\n\t \]*\}\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct VB \{\[\r\n\t \]*int vb;\[\r\n\t \]*\}\r\n$prompt $" {
	    fail "ptype vb"
	}
	-re ".*$prompt $" { fail "ptype vb" }
	timeout { fail "ptype vb (timeout)" }
    }

    send "ptype pAa\n"
    expect {
	-re "type = class A : public virtual V \{\[\r\n\t \]*private:\[\r\n\t \]*V \*_vb\\\$V;\[\r\n\t \]*int a;\[\r\n\t \]*public:\[\r\n\t \]*virtual int f\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct A \{\[\r\n \t\]*struct V V;\[\r\n \t\]*struct V \*_vb\\\$V;\[\r\n \t\]*int a;\[\r\n \t\]*\} \*\r\n$prompt $" {
	    fail "ptype pAa"
	}
	-re ".*$prompt $" { fail "ptype pAa" }
	timeout { fail "ptype pAa (timeout)" }
    }

    send "ptype pAe\n"
    expect {
	-re "type = class A : public virtual V \{\[\r\n\t \]*private:\[\r\n\t \]*V \*_vb\\\$V;\[\r\n\t \]*int a;\[\r\n\t \]*public:\[\r\n\t \]*virtual int f\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct A \{\[\r\n \t\]*struct V V;\[\r\n \t\]*struct V \*_vb\\\$V;\[\r\n \t\]*int a;\[\r\n \t\]*\} \*\r\n$prompt $" {
	    fail "ptype pAe"
	}
	-re ".*$prompt $" { fail "ptype pAe" }
	timeout { fail "ptype pAe (timeout)" }
    }

    send "ptype pBe\n"
    expect {
	-re "type = class B : public A \{\[\r\n\t \]*private:\[\r\n\t \]*int b;\[\r\n\t \]*public:\[\r\n\t \]*virtual int f\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct B \{\[\r\n \t\]*struct A A;\[\r\n \t\]*int b;\[\r\n \t\]*\} \*\r\n$prompt $" {
	    fail "ptype pBe"
	}
	-re ".*$prompt $" { fail "ptype pBe" }
	timeout { fail "ptype pBe (timeout)" }
    }

    send "ptype pDd\n"
    expect {
	-re "type = class D : public AD, public virtual V \{\[\r\n\t \]*private:\[\r\n\t \]*V \*_vb\\\$V;\[\r\n\t \]*public:\[\r\n\t \]*int d;\[\r\n\t \]*static void s\(void\);\[\r\n\t \]*virtual int vg\(void\);\[\r\n\t \]*virtual int vd\(void\);\[\r\n\t \]*int fd\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct D \{\[\r\n\t \]*struct AD AD;\[\r\n\t \]*struct V V;\[\r\n\t \]*struct V \*_vb\\\$V;\[\r\n\t \]*int d;\[\r\n\t \]*\} \*\r\n$prompt $" {
	    fail "ptype pDd"
	}
	-re ".*$prompt $" { fail "ptype pDd" }
	timeout { fail "ptype pDd (timeout)" }
    }

    send "ptype pDe\n"
    expect {
	-re "type = class D : public AD, public virtual V \{\[\r\n\t \]*private:\[\r\n\t \]*V \*_vb\\\$V;\[\r\n\t \]*public:\[\r\n\t \]*int d;\[\r\n\t \]*static void s\(void\);\[\r\n\t \]*virtual int vg\(void\);\[\r\n\t \]*virtual int vd\(void\);\[\r\n\t \]*int fd\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct D \{\[\r\n\t \]*struct AD AD;\[\r\n\t \]*struct V V;\[\r\n\t \]*struct V \*_vb\\\$V;\[\r\n\t \]*int d;\[\r\n\t \]*\} \*\r\n$prompt $" {
	    fail "ptype pDe"
	}
	-re ".*$prompt $" { fail "ptype pDe" }
	timeout { fail "ptype pDe (timeout)" }
    }

    send "ptype pVa\n"
    expect {
	-re "type = class V : public VA, public VB \{\[\r\n\t \]*public:\[\r\n\t \]*int w;\[\r\n\t \]*int f\(void\);\[\r\n\t \]*virtual int vv\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct V \{\[\r\n \t\]*struct VA VA;\[\r\n \t\]*struct VB VB;\[\r\n \t\]*int w;\[\r\n \t\]*\} \*\r\n$prompt $" {
	    fail "ptype pVa"
	}
	-re ".*$prompt $" { fail "ptype pVa" }
	timeout { fail "ptype pVa (timeout)" }
    }

    send "ptype pVv\n"
    expect {
	-re "type = class V : public VA, public VB \{\[\r\n\t \]*public:\[\r\n\t \]*int w;\[\r\n\t \]*int f\(void\);\[\r\n\t \]*virtual int vv\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct V \{\[\r\n \t\]*struct VA VA;\[\r\n \t\]*struct VB VB;\[\r\n \t\]*int w;\[\r\n \t\]*\} \*\r\n$prompt $" {
	    fail "ptype pVv"
	}
	-re ".*$prompt $" { fail "ptype pVv" }
	timeout { fail "ptype pVv (timeout)" }
    }

    send "ptype pVe\n"
    expect {
	-re "type = class V : public VA, public VB \{\[\r\n\t \]*public:\[\r\n\t \]*int w;\[\r\n\t \]*int f\(void\);\[\r\n\t \]*virtual int vv\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct V \{\[\r\n \t\]*struct VA VA;\[\r\n \t\]*struct VB VB;\[\r\n \t\]*int w;\[\r\n \t\]*\} \*\r\n$prompt $" {
	    fail "ptype pVe"
	}
	-re ".*$prompt $" { fail "ptype pVe" }
	timeout { fail "ptype pVe (timeout)" }
    }

    send "ptype pVd\n"
    expect {
	-re "type = class V : public VA, public VB \{\[\r\n\t \]*public:\[\r\n\t \]*int w;\[\r\n\t \]*int f\(void\);\[\r\n\t \]*virtual int vv\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct V \{\[\r\n \t\]*struct VA VA;\[\r\n \t\]*struct VB VB;\[\r\n \t\]*int w;\[\r\n \t\]*\} \*\r\n$prompt $" {
	    fail "ptype pVd"
	}
	-re ".*$prompt $" { fail "ptype pVd" }
	timeout { fail "ptype pVd (timeout)" }
    }

    send "ptype pADe\n"
    expect {
	-re "type = class AD \{\[\r\n\t \]*public:\[\r\n\t \]*virtual int vg\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct AD \{\r\n\} \*\r\n$prompt $" {
	    fail "ptype pADe"
	}
	-re ".*$prompt $" { fail "ptype pADe" }
	timeout { fail "ptype pADe (timeout)" }
    }

    send "ptype pEe\n"
    expect {
	-re "type = class E : public B, public virtual V, public D, public C \{\[\r\n\t \]*public:\[\r\n\t \]*int e;\[\r\n\t \]*virtual int f\(void\);\[\r\n\t \]*virtual int vg\(void\);\[\r\n\t \]*virtual int vv\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct E \{\[\r\n\t \]*struct B B;\[\r\n\t \]*struct V V;\[\r\n\t \]*struct D D;\[\r\n\t \]*struct C C;\[\r\n\t \]*int e;\[\r\n\t \]*\} \*\r\n$prompt $" {
	    fail "ptype pEe"
	}
	-re ".*$prompt $" { fail "ptype pEe" }
	timeout { fail "ptype pEe (timeout)" }
    }

    send "ptype pVB\n"
    expect {
	-re "type = class VB \{\[\r\n\t \]*public:\[\r\n\t \]*int vb;\[\r\n\t \]*int fvb\(void\);\[\r\n\t \]*virtual int vvb\(void\);\[\r\n\t \]*\} \*\r\n$prompt $" {
	    incr passcount
	}
	-re "type = struct VB \{\[\r\n\t \]*int vb;\[\r\n\t \]*\} \*\r\n$prompt $" {
	    fail "ptype pVB"
	}
	-re ".*$prompt $" { fail "ptype pVB" }
	timeout { fail "ptype pVB (timeout)" }
    }

    if $passcount then {
	pass "$passcount correct virtual function types printed"
    }
}

#
#  Test calling of virtual functions.
#

proc test_virtual_calls {} {
    global prompt
    global GDB

    set passcount 0

    send "print pAe->f()\n"
    expect {
	-re ".* = 20\r\n$prompt $" { incr passcount }
	-re "Cannot invoke functions on this machine.*$prompt $"
	    { fail "print pAe->f() FIXME" }
	-re "Structure has no component named f.*$prompt $" {
	    setup_xfail "*-*-*"
	    fail "print pAe->f()"
	}
	-re ".*$prompt $" { fail "print pAe->f()" }
	timeout { fail "print pAe->f() (timeout)" }
	eof { fail "print pAe->f() ($GDB dumped core) (FIXME)" ; gdb_start ; return }
    }

    send "print pAa->f()\n"
    expect {
	-re ".* = 1\r\n$prompt $" { incr passcount }
	-re "Cannot invoke functions on this machine.*$prompt $"
	    { fail "print pAa->f() FIXME" }
	-re "Structure has no component named f.*$prompt $" {
	    setup_xfail "*-*-*"
	    fail "print pAa->f()"
	}
	-re ".*$prompt $" { fail "print pAa->f()" }
	timeout { fail "print pAa->f() (timeout)" }
	eof { fail "print pAa->f() ($GDB dumped core) (FIXME)" ; gdb_start ; return }
    }

    send "print pDe->vg()\n"
    setup_xfail "*-*-*"
    expect {
	-re ".* = 202\r\n$prompt $" { incr passcount }
	-re "Cannot invoke functions on this machine.*$prompt $"
	    { fail "print pDe->vg() FIXME" }
	-re "Structure has no component named vg.*$prompt $" {
	    setup_xfail "*-*-*"
	    fail "print pDe->vg()"
	}
	-re ".*$prompt $" { fail "print pDe->vg()" }
	timeout { fail "print pDe->vg() (timeout)" }
	eof { fail "print pDe->vg() ($GDB dumped core) (FIXME)" ; gdb_start ; return }
    }

    send "print pADe->vg()\n"
    expect {
	-re ".* = 202\r\n$prompt $" { incr passcount }
	-re "Cannot invoke functions on this machine.*$prompt $"
	    { fail "print pADe->vg() FIXME" }
	-re "Structure has no component named vg.*$prompt $" {
	    setup_xfail "*-*-*"
	    fail "print pADe->vg()"
	}
	-re ".*$prompt $" { fail "print pADe->vg()" }
	timeout { fail "print pADe->vg() (timeout)" }
	eof { fail "print pADe->vg() ($GDB dumped core) (FIXME)" ; gdb_start ; return }
    }

    send "print pDd->vg()\n"
    setup_xfail "*-*-*"
    expect {
	-re ".* = 101\r\n$prompt $" { incr passcount }
	-re "Cannot invoke functions on this machine.*$prompt $"
	    { fail "print pDd->vg() FIXME" }
	-re "Structure has no component named vg.*$prompt $" {
	    setup_xfail "*-*-*"
	    fail "print pDd->vg()"
	}
	-re ".*$prompt $" { fail "print pDd->vg()" }
	timeout { fail "print pDd->vg() (timeout)" }
	eof { fail "print pDd->vg() ($GDB dumped core) (FIXME)" ; gdb_start ; return }
    }

    send "print pEe->vvb()\n"
    setup_xfail "*-*-*"
    expect {
	-re ".* = 411\r\n$prompt $" { incr passcount }
	-re "Cannot invoke functions on this machine.*$prompt $"
	    { fail "print pEe->vvb() FIXME" }
	-re "Structure has no component named vvb.*$prompt $" {
	    setup_xfail "*-*-*"
	    fail "print pEe->vvb()"
	}
	-re ".*$prompt $" { fail "print pEe->vvb()" }
	timeout { fail "print pEe->vvb() (timeout)" }
	eof { fail "print pEe->vvb() ($GDB dumped core) (FIXME)" ; gdb_start ; return }
    }

    send "print pVB->vvb()\n"
    expect {
	-re ".* = 407\r\n$prompt $" { incr passcount }
	-re "Cannot invoke functions on this machine.*$prompt $"
	    { fail "print pVb->vvb() FIXME" }
	-re "Structure has no component named vvb.*$prompt $" {
	    setup_xfail "*-*-*"
	    fail "print pVB->vvb()"
	}
	-re ".*$prompt $" { fail "print pVB->vvb()" }
	timeout { fail "print pVB->vvb() (timeout)" }
	eof { fail "print pVB->vvb() ($GDB dumped core) (FIXME)" ; gdb_start ; return }
    }

    send "print pBe->vvb()\n"
    setup_xfail "*-*-*"
    expect {
	-re ".* = 411\r\n$prompt $" { incr passcount }
	-re "Cannot invoke functions on this machine.*$prompt $"
	    { fail "print pBe->vvb() FIXME" }
	-re "Structure has no component named vvb.*$prompt $" {
	    setup_xfail "*-*-*"
	    fail "print pBe->vvb()"
	}
	-re ".*$prompt $" { fail "print pBe->vvb()" }
	timeout { fail "print pBe->vvb() (timeout)" }
	eof { fail "print pBe->vvb() ($GDB dumped core) (FIXME)" ; gdb_start ; return }
    }

    send "print pDe->vvb()\n"
    setup_xfail "*-*-*"
    expect {
	-re ".* = 411\r\n$prompt $" { incr passcount }
	-re "Cannot invoke functions on this machine.*$prompt $"
	    { fail "print pDe->vvb() FIXME" }
	-re "Structure has no component named vvb.*$prompt $" {
	    setup_xfail "*-*-*"
	    fail "print pDe->vvb()"
	}
	-re ".*$prompt $" { fail "print pDe->vvb()" }
	timeout { fail "print pDe->vvb() (timeout)" }
	eof { fail "print pDe->vvb() ($GDB dumped core) (FIXME)" ; gdb_start ; return }
    }

    send "print pEe->vd()\n"
    setup_xfail "*-*-*"
    expect {
	-re ".* = 282\r\n$prompt $" { incr passcount }
	-re "Cannot invoke functions on this machine.*$prompt $"
	    { fail "print pEe->vd() FIXME" }
	-re "Structure has no component named vd.*$prompt $" {
	    setup_xfail "*-*-*"
	    fail "print pEe->vd()"
	}
	-re ".*$prompt $" { fail "print pEe->vd()" }
	timeout { fail "print pEe->vd() (timeout)" }
	eof { fail "print pEe->vd() ($GDB dumped core) (FIXME)" ; gdb_start ; return }
    }

    send "print pEe->fvb()\n"
    setup_xfail "*-*-*"
    expect {
	-re ".* = 311\r\n$prompt $" { incr passcount }
	-re "Cannot invoke functions on this machine.*$prompt $"
	    { fail "print pEe->fvb() FIXME" }
	-re "Structure has no component named fvb.*$prompt $" {
	    setup_xfail "*-*-*"
	    fail "print pEe->fvb()"
	}
	-re ".*$prompt $" { fail "print pEe->fvb()" }
	timeout { fail "print pEe->fvb() (timeout)" }
	eof { fail "print pEe->fvb() ($GDB dumped core) (FIXME)" ; gdb_start ; return }
    }

    send "print pEe->D::vg()\n"
    setup_xfail "*-*-*"
    expect {
	-re ".* = 102\r\n$prompt $" { incr passcount }
	-re "Cannot invoke functions on this machine.*$prompt $"
	    { fail "print pEe->D::vg() FIXME" }
	-re "There is no field named vg.*$prompt $" {
	    setup_xfail "*-*-*"
	    fail "print pEe->D::vg()"
	}
	-re ".*$prompt $" { fail "print pEe->D::vg()" }
	timeout { fail "print pEe->D::vg() (timeout)" }
	eof { fail "print pEe->D::vg() ($GDB dumped core) (FIXME)" ; gdb_start ; return }
    }

    if $passcount then {
	pass "$passcount correct virtual function calls"
    }
}


proc do_tests {} {
    global prms_id
    global bug_id
    global subdir
    global objdir
    global srcdir
    global binfile
    global prompt

    set prms_id 0
    set bug_id 0

    # Start with a fresh gdb.

    gdb_exit
    gdb_start
    gdb_reinitialize_dir $srcdir/$subdir
    gdb_load $objdir/$subdir/$binfile

    send "set language c++\n"
    expect -re "$prompt $"
    send "set width 0\n"
    expect -re "$prompt $"

    test_ptype_of_classes

    if [ runto 'test_calls(void)' ] then {
	test_virtual_calls
    }

    if [istarget "a29k-*-udi"] then {
	# FIXME: If PR 2415 is fixed, this is not needed.
	gdb_target_udi
    }
}

# Check to see if we have an executable to test.  If not, then either we
# haven't tried to compile one, or the compilation failed for some reason.
# In either case, just notify the user and skip the tests in this file.

set binfile "gdbme"
set srcfile $binfile.cc

if ![file exists $objdir/$subdir/$binfile] then {
    if $all_flag then {
	warning "$binfile does not exist; tests suppressed."
    }
} else {
    do_tests
}
