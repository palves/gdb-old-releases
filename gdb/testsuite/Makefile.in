srcdir = .
prefix = /usr/local
program_transform_name =

exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
tooldir = $(libdir)/$(target_alias)

datadir = $(exec_prefix)/lib/dejagnu
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(prefix)/info
includedir = $(prefix)/include
gxx_includedir = $(tooldir)/g++-include
docdir = $(datadir)/doc
targetdir = $(datadir)/$(target_alias)

SHELL = /bin/sh

INSTALL = install -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

CFLAGS = -g
CHILLFLAGS = $(CFLAGS)
CHILL_LIB = -lchill
# This should probably be consistent with the top-level Makefile.in,
# gdb/Makefile.in, and gdb/testsuite/gdb.t2*/Makefile.in, so that "make check"
# has the same effect no matter where it is run.
CXXFLAGS = -g -O

LINK=		ln -s
SUBDIRS=
RUNTEST = runtest
RUNTESTFLAGS = 

RUNTEST_FOR_TARGET = ` \
  if [ -f $${rootme}/../../dejagnu/site.exp ] ; then \
    echo $${rootme}/../../dejagnu/runtest ; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo $(RUNTEST); \
    else \
      t='$(program_transform_name)'; echo runtest | sed -e '' $$t; \
    fi; \
  fi`

CC_FOR_TARGET = ` \
  if [ -f $${rootme}/../../gcc/xgcc ] ; then \
    echo $${rootme}/../../gcc/xgcc -B$${rootme}/../../gcc/; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo $(CC); \
    else \
      t='$(program_transform_name)'; echo gcc | sed -e '' $$t; \
    fi; \
  fi`

CXX = gcc
CXX_FOR_TARGET = ` \
  if [ -f $${rootme}/../../gcc/xgcc ] ; then \
    echo $${rootme}/../../gcc/xgcc -B$${rootme}/../../gcc/; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo $(CXX); \
    else \
      t='$(program_transform_name)'; echo gcc | sed -e '' $$t; \
    fi; \
  fi`

CHILLFLAGS = $(CFLAGS)
CHILL = gcc
CHILL_FOR_TARGET = ` \
  if [ -f $${rootme}/../../gcc/xgcc ] ; then \
    echo $${rootme}/../../gcc/xgcc -B$${rootme}/../../gcc/ -L$${rootme}/../../chillrt/; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo $(CC); \
    else \
      t='$(program_transform_name)'; echo gcc | sed -e '' $$t; \
    fi; \
  fi`

CHILL_LIB = -lchill

CHILL = ` \
  if [ -f $${rootme}/../../gcc/Makefile ] ; then \
    echo $${rootme}/../../gcc/xgcc -B$${rootme}../../gcc/ -L$${rootme}../../chillrt/; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo gcc; \
    else \
      t='$(program_transform_name)'; echo gcc | sed -e '' $$t; \
    fi; \
  fi`

GDB = ` \
  if [ -f $${rootme}/../gdb ] ; \
    then echo $${rootme}|sed -e 's@/[^/]*$$@@'|sed -e 's@$$@/gdb@' ; \
    else echo gdb; \
  fi`

GDBFLAGS = -nx

EXPECT = `if [ -f $${rootme}/../../expect/expect ] ; \
	then echo $${rootme}/../../expect/expect ; \
	else echo expect; fi`

#### host, target, and site specific Makefile frags come in here.

# The use of $$(x_FOR_TARGET) reduces the command line length by not
# duplicating the lengthy definition.
TARGET_FLAGS_TO_PASS = \
        "prefix=$(prefix)" \
        "exec_prefix=$(exec_prefix)" \
        "against=$(against)" \
        'CC=$$(CC_FOR_TARGET)' \
        "CC_FOR_TARGET=$(CC_FOR_TARGET)" \
        "CFLAGS=$(CFLAGS)" \
        "CHILLFLAGS=$(CHILLFLAGS)" \
        'CHILL=$$(CHILL_FOR_TARGET)' \
        "CHILL_FOR_TARGET=$(CHILL_FOR_TARGET)" \
        "CHILL_LIB=$(CHILL_LIB)" \
        'CXX=$$(CXX_FOR_TARGET)' \
        "CXX_FOR_TARGET=$(CXX_FOR_TARGET)" \
        "CXXFLAGS=$(CXXFLAGS)" \
        "MAKEINFO=$(MAKEINFO)" \
        "INSTALL=$(INSTALL)" \
        "INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
        "INSTALL_DATA=$(INSTALL_DATA)" \
        "LDFLAGS=$(LDFLAGS)" \
        "LIBS=$(LIBS)" \
        "RUNTEST=$(RUNTEST)" \
        "RUNTESTFLAGS=$(RUNTESTFLAGS)" \
        "BISON=$(BISON)"

all:		subdirs

.NOEXPORT:
INFODIRS=doc
info:
install-info:
dvi:

install:

uninstall: force

site.exp: ./config.status Makefile
	@echo "Making a new config file..."
	-@rm -f ./tmp?
	@touch site.exp
	-@mv site.exp site.bak
	@echo "## these variables are automatically generated by make ##" > ./tmp0
	@echo "# Do not edit here. If you wish to override these values" >> ./tmp0
	@echo "# add them to the last section" >> ./tmp0
	@echo "set GDBFLAGS \"${GDBFLAGS}\"" >> ./tmp0
	@echo "set host_os ${host_os}" >> ./tmp0
	@echo "set host_alias ${host_alias}" >> ./tmp0
	@echo "set host_cpu ${host_cpu}" >> ./tmp0
	@echo "set host_vendor ${host_vendor}" >> ./tmp0
	@echo "set target_os ${target_os}" >> ./tmp0
	@echo "set target_alias ${target_alias}" >> ./tmp0
	@echo "set target_cpu ${target_cpu}" >> ./tmp0
	@echo "set target_vendor ${target_vendor}" >> ./tmp0
	@echo "set host_triplet ${host_canonical}" >> ./tmp0
	@echo "set target_triplet ${target_canonical}" >> ./tmp0
	@echo "set srcdir ${srcdir}" >> ./tmp0
		@echo "set objdir `pwd`" >> ./tmp0
	@echo "set tool gdb" >> ./tmp0
	@echo "## All variables above are generated by configure. Do Not Edit ##" >> ./tmp0
		@cat ./tmp0 > site.exp
	@cat site.bak | sed \
			-e '1,/^## All variables above are.*##/ d' >> site.exp
	-@rm -f ./tmp?

installcheck:
check: site.exp all just-check
just-check:
	rootme=`pwd`; export rootme; \
	$(RUNTEST_FOR_TARGET) $(RUNTESTFLAGS) --tool gdb GDB=$(GDB) --srcdir $(srcdir)

subdir_do: force
	@for i in $(DODIRS); do \
		if [ -d ./$$i ] ; then \
			if (rootme=`pwd`/ ; export rootme ; \
			    rootsrc=`cd $(srcdir); pwd`/ ; export rootsrc ; \
				cd ./$$i; \
				$(MAKE) $(TARGET_FLAGS_TO_PASS) $(DO)) ; then true ; \
			else exit 1 ; fi ; \
		else true ; fi ; \
	done

force:;


subdirs:
	for dir in ${SUBDIRS}; \
	do \
		echo "$$dir:"; \
		if [ -d $$dir ]; then \
			(rootme=`pwd`/ ; export rootme ; \
			 rootsrc=`cd $(srcdir); pwd`/ ; export rootsrc ; \
			 cd $$dir; $(MAKE) $(TARGET_FLAGS_TO_PASS)); \
		fi; \
	done

clean mostlyclean:
	-rm -f *~ core *.o a.out xgdb *.x
	for dir in ${SUBDIRS}; \
	do \
		echo "$$dir:"; \
		if [ -d $$dir ]; then \
			(cd $$dir; $(MAKE) clean); \
		fi; \
	done

distclean realclean: clean
	-rm -f *~ core *.log *.plog *.sum *.psum site.*
	-rm -f Makefile config.status *-init.exp
	-rm -fr *.log summary detail *.plog *.sum *.psum site.*
	for dir in ${SUBDIRS}; \
	do \
		echo "$$dir:"; \
		(cd $$dir; $(MAKE) distclean); \
	done

Makefile : $(srcdir)/Makefile.in $(srcdir)/configure.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status
