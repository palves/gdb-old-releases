#   Copyright (C) 1988, 1990, 1991, 1992 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# DejaGnu@cygnus.com

# This file was written by Rob Savoye. (rob@cygnus.com)

#
# load support libraries
#
load_lib remote.exp
load_lib gdb.exp
load_lib vxworks.exp

set shell_prompt "->"

# these need to be initialized only if site.exp doesn't set them
if ![info exists prompt] then {
    set prompt "\(vxgdb\)"
}

#
# gdb_version -- extract and print the version number of gcc
#
proc gdb_version {} {
    default_gdb_version
}

#
# gdb_load -- load a file into the debugger.
# We have to stop and start gdb each time we do this, because when
# vxgdb loads two files in a row, the symbols in the first file loaded
# take precedence. Returns -1 on error, else 0.
#
proc gdb_load { arg } {
    global shell_id

#    gdb_exit
#    spawn_vxgdb
    set result 0

    if [vxworks_ld $shell_id $arg]<0 then {
 perror "Couldn't load $arg"
	return -1
    }

    return [gdb_file_cmd $arg]
}

#
# gdb_start -- start gdb running and 
#
proc gdb_start { } {
    global GDB
    global GDBFLAGS
    global spawn_id
    global prompt
    global verbose
    global targetname
    global connectmode
    global reboot
    global shell_id

    # get a connection to the board
    set shell_id [ eval $connectmode "$targetname" ]
    if $shell_id<0 then {
 perror "Couldn't connect to $targetname."
	return -1
    }
    verbose "Spawn id for remote shell is $shell_id"

    # reboot vxworks to get a clean start
    if $reboot then {
	verbose "Rebooting VxWorks, Please wait...\n"

	send -i $shell_id "\CX"
	set timeout 120
	expect {
	    -i $shell_id -re "Connection closed.*$" {
		verbose "\nVxWorks has closed the shell"
		}
	    -i $shell_id eof {
	 perror "(eof) never disconnected from VxWorks shell."
		return -1
	    }
	    -i $shell_id timeout {
	 perror "(timeout) never disconnected from VxWorks shell."
		return -1
	    }
	}
	catch "close -i $shell_id" tmp
	wait -i $shell_id
    }
    set timeout 10

    catch "spawn_vxgdb"
}

proc spawn_vxgdb { } {
    global GDB
    global GDBFLAGS
    global spawn_id
    global prompt
    global verbose
    global targetname

    # start GDB
    if [ llength $GDBFLAGS ] then {
	if {[which $GDB] != 0} then {
	    spawn $GDB $GDBFLAGS
	} else {
            perror "$GDB does not exist."
            exit 1
        }
    } else {
        if {[which $GDB] != 0} then {
	    spawn $GDB
        } else {
            perror "$GDB does not exist."
            exit 1
        }
    }
    expect  {
	-re ".*$prompt $" {
	    verbose "$GDB initialized for cross mode to Vxworks\n"
	}
	-re "$prompt $" {
	    perror "GDB never initialized."
	    return -1
	}
	timeout {
	    perror "(timeout) GDB never initialized."
	    return -1
	}
    }

    # force the height to "unlimited", so no pagers get used
    send "set height 0\n"
    expect -re ".*$prompt $" {}
    # force the width to "unlimited", so no wraparound occurs
    send "set width 0\n"
    expect -re ".*$prompt $" {}
    # set the default arguments to "main", so that "run" with no
    # arguments will work correctly.
    send "set args main\n"
    expect -re ".*$prompt $" {}

    verbose "Setting up target, Please wait..."
    # set targets hostname
    send "target vxworks $targetname\n"
    set timeout 60
    expect {
	-re "Done\..*$prompt $"	{
	    verbose "Set target to $targetname" 1
	}
	-re "net_connect: RPC: Program not registered.*$" {
	    perror "Couldn't set GDB to target $targetname."
	    exit 1
	}
	timeout { 
	    perror "Couldn't set target for vxworks."
	    set timeout 10
	    return -1
	}
    }
    set timeout 10
}

proc gdb_exit { } {
    global shell_id
    if [info exists shell_id] then {
	exit_remote_shell $shell_id
    }
    catch default_gdb_exit
}

#expect_after {
#    "<return>"		   { send "\n"; perror "Window too small." }
#    -re "\(y or n\) " 	   { send "n\n"; perror "Got interactive prompt." }
#    buffer_full		   { perror "internal buffer is full." }
#    eof			   { perror "eof -- pty is hosed." }
#    timeout			   { perror "timeout." }
#    "virtual memory exhausted" { perror "virtual memory exhausted." }
#    "Undefined command"	   { perror "send string probably wrong." }
#}

gdb_start

