# Test Framework Driver for GDB driving Universal Debug Interface on 29K
#   Copyright 1988, 1990, 1991, 1992, 1993 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# DejaGnu@cygnus.com

# This file was written by Rob Savoye. (rob@cygnus.com)

#
# NOTE: these test assume that there is a udi_soc file in th
#

# these need to be initialized only if site.exp doesn't set them
set prompt "\(gdb\)"

if ![info exists prompt] then {
    set prompt "\(gdb\)"
}

load_lib gdb.exp
load_lib udi.exp

#
# gdb_version -- extract and print the version number of gdb
#
proc gdb_version {} {
    default_gdb_version
}

#
# gdb_load -- load a file into the GDB. 
#             Returns a 0 if there was an error,
#                       1 if it load successfully.
#
proc gdb_load { arg } {
    global verbose
    global loadpath
    global loadfile
    global prompt
    global spawn_id
    global GDB
    global expect_out

    send "load $arg\n"
    verbose "Loading $arg into $GDB"
    expect {
	-re "Loading.*\.text.*\.data.*\.bss.*Reading symbols from $arg.+done.*$prompt $" {
	    verbose "Loaded $arg into $GDB"
	    return 1
	}
	-re "$prompt $" {
	    error "Couldn't load $arg into $GDB."
	    return 0
	}
	timeout {
		error "Timed out trying to load $arg."
	    return 0
	}
    }
    if [info exists expect_out(buffer)] then {
	send_log $expect_out(buffer)
    }
    return 0
}

#
# gdb_target_udi
# Set gdb to the desired UDI target
#
proc gdb_target_udi { } {
    global targetname
    global prompt
    global verbose
    global exit_status

    # set targets hostname
    send "target udi $targetname\n"
    set timeout 60
    expect {
	-re "target udi $targetname\[\r\n\]+" {
	    continue -expect
	}
	-re "TIP UDI 1.2 Conformant.*$prompt $"	{
	    verbose "Set target to $targetname"
	}
	-re "TIP-ipc WARNING,.*failed:" {
	    warning "$expect_out(buffer)"
	}
	-re "TIP-ipc ERROR,.*failed:" {
	    error "$expect_out(buffer)"
	}
	-re "A program is being debugged already.  Kill it\? \(y or n\)" {
	    send "y\n"
	    continue -expect
	}
	timeout { 
	    error "Couldn't set target for UDI."
	    cleanup
	    exit $exit_status
	}
    }
    set timeout 10
}

#
# gdb_start -- start GDB running. This assumes that there the
#              UDICONF enviroment variable is set.
#
proc gdb_start { } {
    global GDB
    global GDBFLAGS
    global spawn_id
    global prompt
    global verbose

    set GDB [which $GDB]
    # start GDB
    if [ llength $GDBFLAGS ] then {
	spawn $GDB $GDBFLAGS
    } else {
	spawn $GDB
    }
    expect  {
	-re "GDB.*$prompt $"   {
	    verbose "$GDB initialized for cross mode\n"
	}
	-re "$prompt $" {
	    error "GDB never initialized."
	    return -1
	}
	timeout {
	    error "(timeout) GDB never initialized."    
	    return -1
	}
    }

    # force the height to "unlimited", so no pagers get used
    send "set height 0\n"
    expect -re ".*$prompt $" {}
    # force the width to "unlimited", so no wraparound occurs
    send "set width 0\n"
    expect -re ".*$prompt $" {}
    # set the default arguments to "main", so that "run" with no
    # arguments will work correctly.
    send "set args main\n"
    expect -re ".*$prompt $" {}

    verbose "Setting up target, Please wait..."

    gdb_target_udi
}

#
# gdb_exit -- exit gdb
#
proc gdb_exit { } {
    slay isstip
    catch default_gdb_exit
    set in [open [concat "|ls -F"] r]
    while {[gets $in line]>-1} {
	if [regexp "=$" $line] then {
	    set line [string trimright $line "="]
	    verbose "Removing the $line named socket"
	    exec rm -f $line
	}
    }
    close $in
}

gdb_start

# make sure gdb has actually started, otherwise if the first test
# timesout, DejaGnu crashes
send "\n"
expect {
    -re "$prompt"
    }
