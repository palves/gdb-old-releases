srcdir = .
prefix = /usr/local
program_transform_name =

exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
tooldir = $(libdir)/$(target_alias)

SHELL = /bin/sh

CFLAGS = -g
SUBDIRS =
CC = cc
GDB = gdb
RUNTEST = runtest
RUNTESTFLAGS = 

RUNTEST_FOR_TARGET = ` \
  if [ -f $${rootme}/../..dejagnu/site.exp ] ; then \
    echo $${rootme}/../../dejagnu/runtest ; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo $(RUNTEST); \
    else \
      t='$(program_transform_name)'; echo gcc | sed -e '' $$t; \
    fi; \
  fi`

CC_FOR_TARGET = ` \
  if [ -f $${rootme}/../../gcc/Makefile ] ; then \
    echo $${rootme}/../../gcc/xgcc -B$${rootme}/../../gcc/; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo $(CC); \
    else \
      t='$(program_transform_name)'; echo gcc | sed -e '' $$t; \
    fi; \
  fi`

CXX = gcc
CXX_FOR_TARGET = ` \
  if [ -f $${rootme}/../../gcc/Makefile ] ; then \
    echo $${rootme}/../../gcc/xgcc -B$${rootme}/../../gcc/; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo $(CXX); \
    else \
      t='$(program_transform_name)'; echo gcc | sed -e '' $$t; \
    fi; \
  fi`

CHILLFLAGS = $(CFLAGS)
CHILL = gcc
CHILL_FOR_TARGET = ` \
  if [ -f $${rootme}/../../gcc/Makefile ] ; then \
    echo $${rootme}/../../gcc/xgcc -B$${rootme}/../../gcc/ -L$${rootme}/../../chillrt/; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo $(CC); \
    else \
      t='$(program_transform_name)'; echo gcc | sed -e '' $$t; \
    fi; \
  fi`
CHILL_LIB = -lchill

TARGET_FLAGS_TO_PASS = \
        "prefix=$(prefix)" \
        "exec_prefix=$(exec_prefix)" \
        "against=$(against)" \
        'CC=$$(CC_FOR_TARGET)' \
        "CC_FOR_TARGET=$(CC_FOR_TARGET)" \
        "CFLAGS=$(CFLAGS)" \
        "CHILLFLAGS=$(CHILLFLAGS)" \
        'CHILL=$$(CHILL_FOR_TARGET)' \
        "CHILL_FOR_TARGET=$(CHILL_FOR_TARGET)" \
        "CHILL_LIB=$(CHILL_LIB)" \
        'CXX=$$(CXX_FOR_TARGET)' \
        "CXX_FOR_TARGET=$(CXX_FOR_TARGET)" \
        "CXXFLAGS=$(CXXFLAGS)" \
        "MAKEINFO=$(MAKEINFO)" \
        "INSTALL=$(INSTALL)" \
        "INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
        "INSTALL_DATA=$(INSTALL_DATA)" \
        "RUNTEST=$(RUNTEST)" \
        "RUNTESTFLAGS=$(RUNTESTFLAGS)" \
        "BISON=$(BISON)"

#### host, target, and site specific Makefile frags come in here.

all:	 subdirs

.PHONY: check installcheck
info:
install-info:
install:
installcheck:

.NOEXPORT:
MAKEOVERRIDES=

just-check:	force	
	rootme=`pwd`; export rootme; $(MAKE) DO=check DODIRS=testsuite subdir_do
		
check:	force	
	rootme=`pwd`; export rootme; $(MAKE) DO=check DODIRS=testsuite subdir_do
		
subdir_do: force
	@for i in $(DODIRS); do \
	    if [ -d ./$$i ] ; then \
		if (rootme=`pwd`/ ; export rootme ; \
		    rootsrc=`cd $(srcdir); pwd`/ ; export rootsrc ; \
		    cd ./$$i; \
		    $(MAKE) $(TARGET_FLAGS_TO_PASS) $(DO)) ; then true ; \
		else exit 1 ; fi ; \
	    else true ; fi ; \
	done
force:


subdirs:
	@for dir in ${SUBDIRS}; \
	do \
		echo "$$dir:"; \
		if [ -d $$dir ]; then \
			(rootme=`pwd`/ ; export rootme ; \
			 rootsrc=`cd $(srcdir); pwd`/ ; export rootsrc ; \
			 cd $$dir; $(MAKE) $(TARGET_FLAGS_TO_PASS)); \
		fi; \
	done

clean:
	-rm -f *~ core *.o a.out xgdb *.x
		for dir in ${SUBDIRS}; \
		do \
			echo "$$dir:"; \
			if [ -d $$dir ]; then \
				(cd $$dir; $(MAKE) clean); \
			fi; \
		done

distclean: clean
	-rm -f *~ core
	-rm -f Makefile config.status *-init.exp site.*
	-rm -fr *.log summary detail
		for dir in ${SUBDIRS}; \
		do \
			echo "$$dir:"; \
			(cd $$dir; $(MAKE) distclean); \
		done

Makefile : $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

