if $tracelevel then {
	strace $tracelevel
}

set prms_id 0
set bug_id 0

gdb_reinitialize_dir $srcdir/$subdir
set binfile $objdir/$subdir/interrupt

if ![file exists $binfile] then {
    warning "$binfile does not exist; tests suppressed"
} else {
    gdb_load $binfile
    if [runto main] then {
	send "continue\n"
	expect {
	    -re "\r\ntalk to me baby\r\n$" {}
	    timeout { fail "run (timeout)" }
	    eof { fail "run (eof)" }
	}
	# This should appear twice, once for the echo and once for the
	# program's output.  Under dejagnu (but not interactively) for
	# SunOS4, it only appears once.  Don't worry about it, I imagine
	# dejagnu has just done something to the tty modes.
	send "a\n"
	expect {
	    -re "^a\r\n(|a\r\n)$" {}
	    timeout { fail "echo a (timeout)" }
	    eof { fail "echo a (eof)" }
	}
	# Wait until the program is in the read system call again.
	exec sleep 2

	send "\Cc"
	expect {
	    -re "Program received signal SIGINT.*$prompt $" {
		pass "send control C"
	    }
	    -re ".*$prompt $" { fail "send control C" }
	    timeout { fail "send control C (timeout)" }
	    eof { fail "send control C (eof)" }
	}

	send "p func1 ()\n"
	expect {
	    -re " = 4.*$prompt $" { pass "call function when asleep" }
	    -re "$prompt $" { fail "call function when asleep (wrong output)" }
	    timeout {
		setup_xfail "sparc-*-solaris2*"
		setup_xfail "mips-*-ultrix*"
		setup_xfail "hppa*-*-*"
		setup_xfail "i386*-*-bsd*"
		setup_xfail "*-*-sysv4*"
		fail "call function when asleep (stays asleep)"
		# Send a newline to wake it up
		gdb_test "" " = 4" "call function after waking it"
	    }
	    eof { fail "call function when asleep (eof)" }
	}

	# And the program should still be doing the same thing.
	# The optional trailing \r\n is in case we sent a newline above
	# to wake the program, in which case the program now sends it
	# back.  We check for it either here or in the next expect
	# command, because which one it ends up in is timing dependent.
	send "continue\n"
	# For some reason, i386-*-sysv4 gdb fails to issue the Continuing
	# message, but otherwise appears normal.
	setup_xfail "i*86-*-sysv4*"
	expect {
	    -re "^continue\r\nContinuing.\r\n(\r\n|)$" { pass "continue" }
	    -re "^continue\r\n\r\n" { fail "continue (missing Continuing.)" }
	    -re "$prompt $" { fail "continue" }
	    timeout { fail "continue" }
	    eof { fail "continue" }
	}

	send "data\n"
	# The optional leading \r\n is in case we sent a newline above
	# to wake the program, in which case the program now sends it
	# back.
	expect {
	    -re "^(\r\n|)data\r\n(|data\r\n)$" { pass "echo data" }
	    timeout { fail "echo data (timeout)" }
	    eof { fail "echo data (eof)" }
	}

	send "\Cd"
	expect {
	    -re "end of file.*Program exited normally.*$prompt $" {
		pass "send end of file"
	    }
	    -re "$prompt $" { fail "send end of file" }
	    timeout { fail "send end of file (timeout)" }
	    eof { fail "send end of file (eof)" }
	}
    }
}
return 0
