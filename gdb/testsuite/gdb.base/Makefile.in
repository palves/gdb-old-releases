# Makefile for the base tests for GDB.
# Copyright (C) 1992, 1993, 1994, 1995 Free Software Foundation, Inc.

# This file is part of GDB.

# GDB is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# GDB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

srcdir = .
prefix = /usr/local
program_transform_name =

exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
tooldir = $(libdir)/$(target_alias)

datadir = $(exec_prefix)/lib/dejagnu
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(prefix)/info
includedir = $(prefix)/include
gxx_includedir = $(tooldir)/g++-include
docdir = $(datadir)/doc
targetdir = $(datadir)/$(target_alias)

SHELL = /bin/sh

INSTALL = install -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

CFLAGS = -g

RUNTESTFLAGS = 

LINK=		ln -s

EXPECT = ` \
  if [ -f $${rootme}/../../../expect/expect ] ; then \
    echo $${rootme}/../../../expect/expect ; \
  else \
    echo expect ; \
  fi`

RUNTEST = ` \
  if [ -f $${rootme}/../../dejagnu/site.exp ] ; then \
    echo $${rootme}/../../dejagnu/runtest ; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo runtest; \
    else \
      t='$(program_transform_name)'; echo runtest | sed -e '' $$t; \
    fi; \
  fi`

CC = ` \
  if [ -f $${rootme}/../../../gcc/xgcc ] ; then \
    echo $${rootme}/../../../gcc/xgcc -B$${rootme}/../../../gcc/; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo gcc; \
    else \
      t='$(program_transform_name)'; echo gcc | sed -e '' $$t; \
    fi; \
  fi`

#### host, target, and site specific Makefile frags come in here.

EXECUTABLES =  \
	bitfields  \
	break  \
	callfuncs  \
	coremaker  \
	exprs  \
	funcargs  \
	interrupt  \
	langs  \
	list  \
	mips_pro  \
	nodebug  \
	opaque  \
	printcmds  \
	ptype  \
	recurse  \
	return  \
	run  \
	scope  \
	setvar  \
	sigall \
	signals  \
	twice  \
	watchpoint  \
	whatis  \
	$(CROSS_EXECUTABLES)

# List of test executables that we have available.  They are kept in
# uuencoded format to avoid SCCS/RCS problems with binary files.

CROSS_EXECUTABLES =  \
	i486-elf  \
	i860-elf  \
	m68k-elf  \
	m68k-aout  \
	m68k-aout2  \
	mips-ecoff  \
	sparc-aout  \
	sparc-elf

.c.o:
	$(CC) -c $(CFLAGS) $<
	$(CC) -E $(CFLAGS) $(srcdir)/compiler.c >$*.tmp
	mv $*.tmp $*.ci

all:	$(EXECUTABLES)

run: run.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o run run.o $(LIBS)

whatis: whatis.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o whatis whatis.o $(LIBS)

.PRECIOUS: whatis

ptype: ptype.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o ptype ptype.o $(LIBS)

setvar: setvar.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o setvar setvar.o $(LIBS)

exprs: exprs.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o exprs exprs.o $(LIBS)

break: break.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o break break.o $(LIBS)

signals: signals.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o signals signals.o $(LIBS)

sigall: sigall.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o sigall sigall.o $(LIBS)

twice: twice.c
	echo '#include "twice.c"' >twice-tmp.c
	$(CC) $(CFLAGS) $(LDFLAGS) -I$(srcdir) -o twice twice-tmp.c $(LIBS)
	rm -f twice-tmp.c

watchpoint: watchpoint.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o watchpoint watchpoint.o $(LIBS)

recurse: recurse.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o recurse recurse.o $(LIBS)

opaque: opaque0.o opaque1.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o opaque opaque0.o opaque1.o $(LIBS)

coremaker: coremaker.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o coremaker coremaker.o $(LIBS)

nodebug: nodebug.o
	$(CC) $(LDFLAGS) $(NODEBUG_FLAGS) -o nodebug nodebug.o $(LIBS)

# This gets compiled *without* -g, so don't add CFLAGS here.

nodebug.o: nodebug.c
	$(CC) -c $(srcdir)/nodebug.c
	$(CC) -E $(srcdir)/compiler.c >nodebug.tmp
	mv nodebug.tmp nodebug.ci

# For VPATH and Sun Make, we have to make explicit dependencies.
# DEC make doesn't seem to understand the ".u" dependency w/VPATH either.

m68k-elf: $(srcdir)/m68k-elf.u
	uudecode $(srcdir)/m68k-elf.u

m68k-aout: $(srcdir)/m68k-aout.u
	uudecode $(srcdir)/m68k-aout.u

m68k-aout2: $(srcdir)/m68k-aout2.u
	uudecode $(srcdir)/m68k-aout2.u

mips-ecoff: $(srcdir)/mips-ecoff.u
	uudecode $(srcdir)/mips-ecoff.u

i486-elf: $(srcdir)/i486-elf.u
	uudecode $(srcdir)/i486-elf.u

sparc-aout: $(srcdir)/sparc-aout.u
	uudecode $(srcdir)/sparc-aout.u

i860-elf: $(srcdir)/i860-elf.u
	uudecode $(srcdir)/i860-elf.u

sparc-elf: $(srcdir)/sparc-elf.u
	uudecode $(srcdir)/sparc-elf.u

list: list0.o list1.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o list list0.o list1.o $(LIBS)

scope: scope0.o scope1.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o scope scope0.o scope1.o $(LIBS)

langs: langs0.o langs1.o langs2.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o langs langs0.o langs1.o langs2.o $(LIBS)

bitfields: bitfields.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o bitfields.tmp bitfields.o $(LIBS)
	mv bitfields.tmp bitfields

.PRECIOUS: bitfields

funcargs: funcargs.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o funcargs funcargs.o $(LIBS)

return: return.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o return return.o $(LIBS)

mips_pro: mips_pro.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o mips_pro mips_pro.o $(LIBS)

printcmds: printcmds.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o printcmds printcmds.o $(LIBS)

# Try compiling this with prototypes, if that fails maybe the compiler
# is a pre-ANSI compiler, in which case don't use prototypes.
callfuncs.o: callfuncs.c
	(echo set prototypes 1 >callfuncs.tmp; \
	  $(CC) -c $(CFLAGS) $(srcdir)/callfuncs.c 2>/dev/null) \
	|| (echo set prototypes 0 >callfuncs.tmp; \
	  $(CC) -c $(CFLAGS) -DNO_PROTOTYPES $(srcdir)/callfuncs.c)
	$(CC) $(CFLAGS) -E $(srcdir)/compiler.c >>callfuncs.tmp
	mv callfuncs.tmp callfuncs.ci

callfuncs: callfuncs.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o callfuncs callfuncs.o $(LIBS)

interrupt: interrupt.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o interrupt interrupt.o $(LIBS)

.NOEXPORT:

INFODIRS=doc

info:

install-info:

dvi:

install:

uninstall: force

site.exp: ./config.status Makefile
	@echo "Making a new config file..."
	-@rm -f ./tmp?
	@touch site.exp
	-@mv site.exp site.bak
	@echo "## these variables are automatically generated by make ##" > ./tmp0
	@echo "# Do not edit here. If you wish to override these values" >> ./tmp0
	@echo "# add them to the last section" >> ./tmp0
	@echo "set host_triplet ${host_canonical}" >> ./tmp0
	@echo "set target_triplet ${target_canonical}" >> ./tmp0
	@echo "set srcdir ${srcdir}" >> ./tmp0
		@echo "set objdir `pwd`" >> ./tmp0
	@echo "set tool gdb" >> ./tmp0
	@echo "## All variables above are generated by configure. Do Not Edit ##" >> ./tmp0
		@cat ./tmp0 > site.exp
	@cat site.bak | sed \
			-e '1,/^## All variables above are.*##/ d' >> site.exp
	-@rm -f ./tmp?

installcheck:
check: site.exp all just-check
just-check:
	rootme=`pwd`; export rootme; \
	srcdir=${srcdir} ; export srcdir ; \
	EXPECT=${EXPECT} ; export EXPECT ; \
	if [ -f $${rootme}/../../expect/expect ] ; then  \
	  TCL_LIBRARY=$${srcdir}/../../tcl/library ; \
	  export TCL_LIBRARY ; fi ; \
	$(RUNTEST) $(RUNTESTFLAGS) --tool gdb --srcdir $(srcdir)

clean mostlyclean:
	-rm -f *~ *.o a.out xgdb *.x $(EXECUTABLES) *.ci *.tmp
	-rm -f core core.coremaker coremaker.core corefile

distclean realclean: clean
	-rm -f *~ core *.log *.plog *.sum *.psum site.*
	-rm -f Makefile config.status *-init.exp
	-rm -fr *.log summary detail *.plog *.sum *.psum site.*

Makefile : $(srcdir)/Makefile.in $(srcdir)/configure.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

