#Copyright 1989, 1990, 1991, 1992, 1993 Free Software Foundation, Inc.

# This file is part of GDB.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

prefix = /usr/local

program_transform_name =
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
tooldir = $(libdir)/$(target_alias)

datadir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(prefix)/info
includedir = $(prefix)/include
docdir = $(datadir)/doc

SHELL = /bin/sh

INSTALL = install -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

AR = ar
AR_FLAGS = qv
RANLIB = ranlib

# Flags that describe where you can find the termcap library.
# This can be overridden in the host Makefile fragment file.
TERMCAP = -ltermcap

# System V: If you compile gdb with a compiler which uses the coff
# encapsulation feature (this is a function of the compiler used, NOT
# of the m-?.h file selected by config.gdb), you must make sure that
# the GNU nm is the one that is used by munch.

# If you are compiling with GCC, make sure that either 1) You use the
# -traditional flag, or 2) You have the fixed include files where GCC
# can reach them.  Otherwise the ioctl calls in inflow.c
# will be incorrectly compiled.  The "fixincludes" script in the gcc
# distribution will fix your include files up.
#CC=cc
#CC=gcc -traditional
GCC=gcc

# Directory containing source files.  Don't clean up the spacing,
# this exact string is matched for by the "configure" script.
srcdir = .

# It is also possible that you will need to add -I/usr/include/sys to the
# CFLAGS section if your system doesn't have fcntl.h in /usr/include (which 
# is where it should be according to Posix).

# If you use bison instead of yacc, it needs to include the "-y" argument.
#BISON=bison -y
BISON=yacc
YACC=$(BISON)

# where to find texinfo; GDB dist should include a recent one
TEXIDIR=${srcdir}/../texinfo

# where to find makeinfo, preferably one designed for texinfo-2
MAKEINFO=makeinfo

# Set this up with gcc if you have gnu ld and the loader will print out
# line numbers for undefinded refs.
#CC-LD=gcc -static
CC-LD=${CC}

# Where is the "include" directory?  Traditionally ../include or ./include
INCLUDE_DIR =  ${srcdir}/../include
INCLUDE_DEP = $$(INCLUDE_DIR)

# Where is the source dir for the MMALLOC library? Traditionally ../mmalloc
# or ./mmalloc  (When we want the binary library built from it, we use
# ${MMALLOC_DIR}${subdir}.)
# Note that mmalloc can still be used on systems without mmap().
# To use your system malloc, comment out the following defines.
MMALLOC_DIR = ${srcdir}/../mmalloc
MMALLOC_DEP = $$(MMALLOC_DIR)
MMALLOC_LIB = ./../mmalloc${subdir}/libmmalloc.a
# To use your system malloc, uncomment MMALLOC_DISABLE.
#MMALLOC_DISABLE = -DNO_MMALLOC
# To use mmalloc but disable corruption checking, uncomment MMALLOC_CHECK
#MMALLOC_CHECK = -DNO_MMALLOC_CHECK
MMALLOC_CFLAGS = ${MMALLOC_CHECK} ${MMALLOC_DISABLE}

# Where is the source dir for the BFD library?  Traditionally ../bfd or ./bfd
# (When we want the binary library built from it, we use ${BFD_DIR}${subdir}.)
BFD_DIR =  ${srcdir}/../bfd
BFD_DEP = $$(BFD_DIR)
BFD_LIB = ./../bfd${subdir}/libbfd.a

# Where is the source dir for the READLINE library?  Traditionally in .. or .
# (For the binary library built from it, we use ${READLINE_DIR}${subdir}.)
READLINE_DIR = ${srcdir}/../readline
READLINE_DEP = $$(READLINE_DIR)
RL_LIB = ./../readline${subdir}/libreadline.a

# All the includes used for CFLAGS and for lint.
# -I. for config files.
# -I${srcdir} possibly for regex.h also.
# -I${srcdir}/config for more generic config files.
INCLUDE_CFLAGS = -I. -I${srcdir} -I${srcdir}/config -I$(INCLUDE_DIR) -I$(BFD_DIR) -I$(READLINE_DIR)

# M{H,T}_CFLAGS, if defined, has host- and target-dependent CFLAGS
# from the config/ directory.
GLOBAL_CFLAGS = ${MT_CFLAGS} ${MH_CFLAGS}
#PROFILE_CFLAGS = -pg

# CFLAGS is specifically reserved for setting from the command line
# when running make.  I.E.  "make USER_CFLAGS=-Wmissing-prototypes".
CFLAGS = -g
# INTERNAL_CFLAGS is the aggregate of all other *CFLAGS macros.
INTERNAL_CFLAGS = ${CFLAGS} ${GLOBAL_CFLAGS} ${PROFILE_CFLAGS} ${MMALLOC_CFLAGS} ${INCLUDE_CFLAGS} ${USER_CFLAGS}
# None of the things in CFLAGS will do any harm, and on some systems
#  (e.g. SunOS4) it is important to use the MH_CFLAGS.
LDFLAGS = $(CFLAGS)

# Where is the "-liberty" library, containing getopt and obstack?
LIBIBERTY_DIR = ${srcdir}/../libiberty
LIBIBERTY = ./../libiberty${subdir}/libiberty.a

# Where is the "-lopcodes" library, with (some of) the opcode tables and
# disassemblers?
OPCODES = ./../opcodes${subdir}/libopcodes.a

# The config/mh-* file must define REGEX and REGEX1 on USG machines.
# If your sysyem is missing alloca(), or, more likely, it's there but
# it doesn't work, define ALLOCA & ALLOCA1 too.

# Libraries and corresponding dependencies for compiling gdb.
# {X,T}M_CLIBS, defined in *config files, have host- and target-dependent libs.
# TERMCAP comes after readline, since readline depends on it.
CLIBS = ${BFD_LIB} ${RL_LIB} ${TERMCAP} ${OPCODES} ${MMALLOC_LIB} \
	${LIBIBERTY} ${XM_CLIBS} ${TM_CLIBS} ${NAT_CLIBS}
CDEPS = ${XM_CDEPS} ${TM_CDEPS} ${NAT_CDEPS} \
	${BFD_LIB} ${RL_LIB} ${OPCODES} ${MMALLOC_LIB} ${LIBIBERTY}

ADD_FILES = ${REGEX} ${ALLOCA}  ${XM_ADD_FILES} ${TM_ADD_FILES} \
	${NAT_ADD_FILES}
ADD_DEPS = ${REGEX1} ${ALLOCA1} ${XM_ADD_FILES} ${TM_ADD_FILES} \
	${NAT_ADD_FILES}

VERSION = 4.9
DIST=gdb

LINT=/usr/5bin/lint
LINTFLAGS= -I${BFD_DIR}

RUNTEST=runtest
RUNTESTFLAGS=

# Host and target-dependent makefile fragments come in here.
####
# End of host and target-dependent makefile fragments

FLAGS_TO_PASS = \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)" \
	"against=$(against)" \
	"AR=$(AR)" \
	"AR_FLAGS=$(AR_FLAGS)" \
	"CC=$(CC)" \
	"CFLAGS=$(CFLAGS)" \
	"CHILLFLAGS=$(CHILLFLAGS)" \
	"CHILL=$(CHILL)" \
	"CHILL_LIB=$(CHILL_LIB)" \
	"CXX=$(CXX)" \
	"CXXFLAGS=$(CXXFLAGS)" \
	"RANLIB=$(RANLIB)" \
	"MAKEINFO=$(MAKEINFO)" \
	"INSTALL=$(INSTALL)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"RUNTEST=$(RUNTEST)" \
	"RUNTESTFLAGS=$(RUNTESTFLAGS)" \
	"BISON=$(BISON)"

# Flags that we pass when building the testsuite.

CC_FOR_TARGET = ` \
  if [ -f $${rootme}/../gcc/Makefile ] ; then \
    echo $${rootme}/../gcc/xgcc -B$${rootme}/../gcc/; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo $(CC); \
    else \
      t='$(program_transform_name)'; echo gcc | sed -e '' $$t; \
    fi; \
  fi`

CXX = gcc

CXX_FOR_TARGET = ` \
  if [ -f $${rootme}/../gcc/Makefile ] ; then \
    echo $${rootme}/../gcc/xgcc -B$${rootme}/../gcc/; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo $(CXX); \
    else \
      t='$(program_transform_name)'; echo gcc | sed -e '' $$t; \
    fi; \
  fi`

CHILLFLAGS = $(CFLAGS)
CHILL = gcc
CHILL_FOR_TARGET = ` \
  if [ -f $${rootme}/../gcc/Makefile ] ; then \
    echo $${rootme}/../gcc/xgcc -B$${rootme}/../gcc/ -L$${rootme}/../chillrt/; \
  else \
    if [ "$(host_canonical)" = "$(target_canonical)" ] ; then \
      echo $(CC); \
    else \
      t='$(program_transform_name)'; echo gcc | sed -e '' $$t; \
    fi; \
  fi`
CHILL_LIB = -lchill

# The use of $$(x_FOR_TARGET) reduces the command line length by not
# duplicating the lengthy definition.
TARGET_FLAGS_TO_PASS = \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)" \
	"against=$(against)" \
	'CC=$$(CC_FOR_TARGET)' \
	"CC_FOR_TARGET=$(CC_FOR_TARGET)" \
	"CFLAGS=$(CFLAGS)" \
	"CHILLFLAGS=$(CHILLFLAGS)" \
	'CHILL=$$(CHILL_FOR_TARGET)' \
	"CHILL_FOR_TARGET=$(CHILL_FOR_TARGET)" \
	"CHILL_LIB=$(CHILL_LIB)" \
	'CXX=$$(CXX_FOR_TARGET)' \
	"CXX_FOR_TARGET=$(CXX_FOR_TARGET)" \
	"CXXFLAGS=$(CXXFLAGS)" \
	"MAKEINFO=$(MAKEINFO)" \
	"INSTALL=$(INSTALL)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"RUNTEST=$(RUNTEST)" \
	"RUNTESTFLAGS=$(RUNTESTFLAGS)" \
	"BISON=$(BISON)"

# All source files that go into linking GDB.
# Source files which are included via a config/*/* Makefile fragment should
# *not* be specified here; they're in "ALLDEPFILES".
# Neither should links made at configuration time be specified here, since
# SFILES is used in building the distribution archive.

SFILES = ${srcdir}/blockframe.c ${srcdir}/breakpoint.c ${srcdir}/buildsym.c \
  ${srcdir}/c-exp.y ${srcdir}/c-lang.c ${srcdir}/c-typeprint.c \
  ${srcdir}/c-valprint.c ${srcdir}/ch-exp.y ${srcdir}/ch-lang.c \
  ${srcdir}/ch-typeprint.c ${srcdir}/ch-valprint.c ${srcdir}/coffread.c \
  ${srcdir}/command.c ${srcdir}/complaints.c ${srcdir}/core.c \
  ${srcdir}/cp-valprint.c ${srcdir}/dbxread.c ${srcdir}/demangle.c \
  ${srcdir}/dwarfread.c ${srcdir}/elfread.c ${srcdir}/environ.c \
  ${srcdir}/eval.c ${srcdir}/expprint.c ${srcdir}/findvar.c \
  ${srcdir}/gdbtypes.c \
  ${srcdir}/infcmd.c ${srcdir}/inflow.c ${srcdir}/infrun.c \
  ${srcdir}/language.c ${srcdir}/putenv.c ${srcdir}/m2-exp.y \
  ${srcdir}/m2-lang.c ${srcdir}/m2-typeprint.c \
  ${srcdir}/m2-valprint.c ${srcdir}/main.c ${srcdir}/maint.c \
  ${srcdir}/mem-break.c ${srcdir}/minsyms.c ${srcdir}/mipsread.c \
  ${srcdir}/objfiles.c ${srcdir}/parse.c ${srcdir}/printcmd.c \
  ${srcdir}/remote.c ${srcdir}/source.c ${srcdir}/stabsread.c \
  ${srcdir}/stack.c \
  ${srcdir}/symfile.c ${srcdir}/symmisc.c ${srcdir}/symtab.c \
  ${srcdir}/target.c ${srcdir}/typeprint.c ${srcdir}/utils.c \
  ${srcdir}/valarith.c \
  ${srcdir}/valops.c ${srcdir}/valprint.c ${srcdir}/values.c \
  ${srcdir}/serial.c ${srcdir}/ser-go32.c ${srcdir}/ser-unix.c

# Files that are not source code, but need to go into gdb-$(VERSION).tar.Z.
NONSRC = ${srcdir}/Makefile.in ${srcdir}/depend ${srcdir}/alldeps.mak \
	${srcdir}/munch ${srcdir}/configure.in \
	${srcdir}/ChangeLog ${srcdir}/ChangeLog-9091 ${srcdir}/ChangeLog-3.x \
	${srcdir}/gdb.1 ${srcdir}/refcard.ps ${srcdir}/README ${srcdir}/TODO \
	TAGS ${srcdir}/NEWS ${srcdir}/Projects ${srcdir}/.gdbinit \
	${srcdir}/COPYING $(YYFILES) ${srcdir}/copying.c \
	${srcdir}/copying.awk \
	${srcdir}/saber.suppress ${srcdir}/standalone.c ${srcdir}/stuff.c \
	${srcdir}/kdb-start.c ${srcdir}/gcc.patch \
	${srcdir}/nindy-share/Makefile ${srcdir}/nindy-share/VERSION \
	${srcdir}/nindy-share/README ${srcdir}/vx-share/README \
	${srcdir}/29k-share/README \
	${srcdir}/config/convex/Convex.notes

# All source files that lint should look at
LINTFILES = $(SFILES) $(YYFILES) init.c

# Any additional files specified on these lines should also be added to
# the NONSRC definition, so they go in the tar files.
SFILES_STAND = $(SFILES) standalone.c
SFILES_KGDB  = $(SFILES) stuff.c kdb-start.c

# Header files that are not named in config/*/* Makefile fragments go here.
HFILES = ${srcdir}/breakpoint.h ${srcdir}/buildsym.h ${srcdir}/call-cmds.h \
	${srcdir}/command.h ${srcdir}/defs.h ${srcdir}/environ.h \
	${srcdir}/expression.h ${srcdir}/frame.h ${srcdir}/gdbcmd.h \
	${srcdir}/gdbcore.h ${srcdir}/gdbtypes.h ${srcdir}/gdb-stabs.h \
	${srcdir}/inferior.h ${srcdir}/language.h ${srcdir}/minimon.h \
	${srcdir}/objfiles.h ${srcdir}/parser-defs.h \
	${srcdir}/partial-stab.h ${srcdir}/serial.h ${srcdir}/signals.h \
	${srcdir}/solib.h ${srcdir}/symfile.h ${srcdir}/symtab.h \
	${srcdir}/stabsread.h ${srcdir}/target.h ${srcdir}/terminal.h \
	${srcdir}/typeprint.h ${srcdir}/xcoffsolib.h ${srcdir}/value.h \
	${srcdir}/c-lang.h ${srcdir}/ch-lang.h ${srcdir}/m2-lang.h \
	${srcdir}/complaints.h ${srcdir}/ns32k-opcode.h ${srcdir}/valprint.h \
	${srcdir}/config/m68k/tm-m68k.h ${srcdir}/config/pa/tm-hppa.h \
	${srcdir}/config/i960/tm-i960.h ${srcdir}/config/sparc/tm-sparc.h \
	${srcdir}/config/tm-sunos.h \
	${srcdir}/config/tm-sysv4.h ${srcdir}/config/m68k/xm-m68k.h \
	${srcdir}/config/sparc/xm-sparc.h \
	${srcdir}/config/xm-sysv4.h ${srcdir}/config/vax/xm-vax.h \
	${srcdir}/config/nm-trash.h ${srcdir}/29k-share/udi/udiids.h \
	${srcdir}/29k-share/udi/udiphcfg.h ${srcdir}/29k-share/udi/udiphsun.h \
	${srcdir}/29k-share/udi/udiproc.h ${srcdir}/29k-share/udi/udipt29k.h \
	${srcdir}/29k-share/udi/udiptcfg.h ${srcdir}/29k-share/udi/udisoc.h \
	${srcdir}/29k-share/udi_soc ${srcdir}/nindy-share/b.out.h \
	${srcdir}/nindy-share/block_io.h ${srcdir}/nindy-share/coff.h \
	${srcdir}/nindy-share/demux.h ${srcdir}/nindy-share/env.h \
	${srcdir}/nindy-share/stop.h ${srcdir}/nindy-share/ttycntl.h \
	${srcdir}/vx-share/dbgRpcLib.h ${srcdir}/vx-share/ptrace.h \
	${srcdir}/vx-share/vxTypes.h ${srcdir}/vx-share/vxWorks.h \
	${srcdir}/vx-share/wait.h ${srcdir}/vx-share/xdr_ld.h \
	${srcdir}/vx-share/xdr_ptrace.h ${srcdir}/vx-share/xdr_rdb.h

# GDB "info" files, which should be included in their entirety
INFOFILES = gdb.info*

REMOTE_EXAMPLES = m68k-stub.c i386-stub.c sparc-stub.c rem-multi.shar

POSSLIBS = ${srcdir}/regex.c ${srcdir}/regex.h ${srcdir}/alloca.c

TESTS = testbpt.c testfun.c testrec.c testreg.c testregs.c

# Subdirectories of gdb, which should be included in their entirety in
# gdb-xxx.tar.Z:
TARDIRS = doc sparclite # tests

DEPFILES = ${TDEPFILES} ${XDEPFILES} ${NATDEPFILES}

SOURCES = $(SFILES) $(ALLDEPFILES) $(YYFILES)
TAGFILES = $(SOURCES) ${HFILES} ${ALLPARAM} ${POSSLIBS} 

TARFILES = ${SFILES} ${HFILES} ${NONSRC} ${ALLDEPFILES} $(ALLCONFIG) \
	$(ALLPARAM) $(INFOFILES) ${POSSLIBS} ${REMOTE_EXAMPLES}

OBS = version.o main.o blockframe.o breakpoint.o findvar.o stack.o source.o \
    values.o eval.o valops.o valarith.o valprint.o printcmd.o \
    symtab.o symfile.o symmisc.o infcmd.o infrun.o remote.o \
    command.o utils.o expprint.o environ.o gdbtypes.o \
    copying.o $(DEPFILES) mem-break.o target.o \
    putenv.o parse.o language.o $(YYOBJ) \
    buildsym.o objfiles.o minsyms.o maint.o demangle.o \
    dbxread.o coffread.o elfread.o dwarfread.o mipsread.o \
    stabsread.o core.o c-lang.o ch-lang.o m2-lang.o complaints.o \
    typeprint.o c-typeprint.o ch-typeprint.o m2-typeprint.o \
    c-valprint.o cp-valprint.o ch-valprint.o m2-valprint.o \
    serial.o ser-hardwire.o

RAPP_OBS = rgdb.o rudp.o rserial.o serial.o udp.o $(XDEPFILES)

TSOBS = inflow.o

NTSOBS = standalone.o

TSSTART = /lib/crt0.o

NTSSTART = kdb-start.o

SUBDIRS = doc testsuite

# For now, shortcut the "configure GDB for fewer languages" stuff.
YYFILES = c-exp.tab.c m2-exp.tab.c ch-exp.tab.c
YYOBJ = c-exp.tab.o m2-exp.tab.o ch-exp.tab.o

# Prevent Sun make from putting in the machine type.  Setting
# TARGET_ARCH to nothing works for SunOS 3, 4.0, but not for 4.1.
.c.o:
	${CC} -c ${INTERNAL_CFLAGS} $<

all: gdb
	@$(MAKE) $(FLAGS_TO_PASS) DO=all "DODIRS=`echo $(SUBDIRS) | sed 's/testsuite//'`" subdir_do

installcheck:
check: force
	@rootme=`pwd`; export rootme; $(MAKE) $(TARGET_FLAGS_TO_PASS) DO=check DODIRS=testsuite subdir_do
info dvi: force
	@$(MAKE) $(FLAGS_TO_PASS) DO=$@ "DODIRS=$(SUBDIRS)" subdir_do
install-info: force
	@$(MAKE) $(FLAGS_TO_PASS) DO=install-info "DODIRS=$(SUBDIRS)" subdir_do
clean-info: force
	@$(MAKE) $(FLAGS_TO_PASS) DO=clean-info "DODIRS=$(SUBDIRS)" subdir_do

gdb.z:gdb.1
	nroff -man $(srcdir)/gdb.1 | col -b > gdb.t 
	pack gdb.t ; rm -f gdb.t
	mv gdb.t.z gdb.z
	
install: gdb 
	-parent=`echo $(bindir)|sed -e 's@/[^/]*$$@@'`; \
	if [ -d $$parent ] ; then true ; else mkdir $$parent ; fi
	-if [ -d $(bindir) ] ; then true ; else mkdir $(bindir) ; fi
	-parent=`echo $(man1dir)|sed -e 's@/[^/]*$$@@'`; \
	if [ -d $$parent ] ; then true ; else mkdir $$parent ; fi
	-if [ -d $(man1dir) ] ; then true ; else mkdir $(man1dir) ; fi
	-n=`t='$(program_transform_name)'; echo gdb | sed -e "" $$t`; \
	$(INSTALL_PROGRAM) gdb $(bindir)/$$n; \
	$(INSTALL_DATA) $(srcdir)/gdb.1 $(man1dir)/$$n.1
	$(M_INSTALL)
	@$(MAKE) DO=install "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS) subdir_do

init.c: $(srcdir)/munch $(OBS) $(TSOBS)
	$(srcdir)/munch ${MUNCH_DEFINE} $(OBS) $(TSOBS) > init.c

gdb: $(OBS) $(TSOBS) ${ADD_DEPS} ${CDEPS} init.o
	${CC-LD} $(GLOBAL_CFLAGS) $(LDFLAGS) -o gdb \
	  init.o $(OBS) $(TSOBS) $(ADD_FILES) $(CLIBS) $(LOADLIBES)

saber_gdb: $(SFILES) $(DEPFILES) copying.c version.c
	#setopt load_flags $(CFLAGS) -I$(BFD_DIR) -DHOST_SYS=SUN4_SYS
	#load ./init.c $(SFILES)
	#unload ${srcdir}/c-exp.y ${srcdir}/m2-exp.y ${srcdir}/ch-exp.y
	#unload ${srcdir}/vx-share/*.h
	#unload ${srcdir}/nindy-share/[A-Z]*
	#load c-exp.tab.c m2-exp.tab.c ch-exp.tab.c
	#load copying.c version.c
	#load ../opcodes/libopcodes.a
	#load ../libiberty/libiberty.a
	#load ../bfd/libbfd.a
	#load ../readline/libreadline.a
	#load ../mmalloc/libmmalloc.a
	#load -ltermcap 
	#load `echo " "$(DEPFILES) | sed -e 's/\.o/.c/g' -e 's, , ../,g'`
	echo "Load .c corresponding to:" $(DEPFILES)


# This is useful when debugging GDB, because some Unix's don't let you run GDB
# on itself without copying the executable.  So "make gdb1" will make
# gdb and put a copy in gdb1, and you can run it with "gdb gdb1".
# Removing gdb1 before the copy is the right thing if gdb1 is open
# in another process.
gdb1: gdb
	rm -f gdb1
	cp gdb gdb1

# This is a remote stub which runs under unix and starts up an
# inferior process.  This is at least useful for debugging GDB's
# remote support.
rapp: $(RAPP_OBS)
	rm -f rapp_init.c
	${srcdir}/munch ${MUNCH_DEFINE} ${RAPP_OBS} > rapp_init.c
	${CC-LD} $(LDFLAGS) -o $@ rapp_init.c $(RAPP_OBS)
	
# Support for building Makefile out of configured pieces, automatically
# generated dependencies, etc.  alldeps.mak is a file that contains
# "make" variable definitions for all ALLDEPFILES, ALLPARAM, and ALLCONFIG,
# all cadged from the current contents of the config subtree.

alldeps.mak: force
	rm -f alldeps.mak alldeps*.tmp allparam*.tmp allconfig*.tmp
	for i in `(cd ${srcdir}; find config -name '*.m[ht]' -print)` ; do \
	  echo $$i >>allconfig.tmp; \
	  awk <${srcdir}/$$i ' \
	    $$1 == "TDEPFILES=" || $$1 == "XDEPFILES=" \
	      || $$1 == "NATDEPFILES=" { \
	      for (i = 2; i <= NF; i++) \
	        print $$i >> "alldeps.tmp" ; \
            } \
	    $$1 == "TM_FILE=" || $$1 == "XM_FILE=" || $$1 == "NAT_FILE=" { \
	      print $$2 >> "allparam.tmp" }' ; \
	done
	sort <alldeps.tmp | uniq | \
	  sed -e 's/arm-convert.o/arm-convert.s/' \
	      -e 's!^Onindy.o!nindy-share/Onindy.c!' \
	      -e 's!^nindy.o!nindy-share/nindy.c!' \
	      -e 's!ttybreak.o!nindy-share/ttybreak.c!' \
	      -e 's!ttyflush.o!nindy-share/ttyflush.c!' \
	      -e 's!xdr_ld.o!vx-share/xdr_ld.c!' \
	      -e 's!xdr_ptrace.o!vx-share/xdr_ptrace.c!' \
	      -e 's!xdr_rdb.o!vx-share/xdr_rdb.c!' \
	      -e 's!udr.o!29k-share/udi/udr.c!' \
	      -e 's!udip2soc.o!29k-share/udi/udip2soc.c!' \
	      -e '/..\/sim\//d' \
	      -e '/..\/opcodes\//d' \
	      -e 's/\.o/.c/' \
	    >alldeps2.tmp
	for i in `cat allparam.tmp` ; do \
	  (cd ${srcdir} ; \
	  find config -name $$i -print ) >>allparam2.tmp ; \
	done
	echo '# Start of "alldeps.mak" definitions' >>alldeps.mak;
	sort <alldeps2.tmp | uniq | awk 'BEGIN {printf "ALLDEPFILES="} \
	  NR == 0 {printf "$${srcdir}/" $$0;} \
	  NR != 0 {printf "\\\n" "$${srcdir}/" $$0} \
	  END {printf "\n\n"}' >>alldeps.mak;
	sort <allparam2.tmp | uniq | awk 'BEGIN {printf "ALLPARAM="} \
	  NR == 0 {printf "$${srcdir}/" $$0;} \
	  NR != 0 {printf "\\\n" "$${srcdir}/" $$0} \
	  END {printf "\n\n"}' >>alldeps.mak;
	sort <allconfig.tmp | uniq | awk 'BEGIN {printf "ALLCONFIG="} \
	  NR == 0 {printf "$${srcdir}/" $$0;} \
	  NR != 0 {printf "\\\n" "$${srcdir}/" $$0} \
	  END {printf "\n\n"}' >>alldeps.mak;
	echo '# End of "alldeps.mak" definitions' >>alldeps.mak;
	rm -f alldeps*.tmp allparam*.tmp allconfig*.tmp

# The sed script makes everything which depends on {x,t}m.h depend on
# config.status as well, in case someone reconfigures gdb out from
# under an already compiled gdb.
depend: $(SOURCES) Makefile.in
	@echo Ignore errors about non-existent system-supplied include files
	@echo for systems other than the one you are using.
	@echo Also ignore any errors in arm-convert.s.
	-$(GCC) -MM -nostdinc -I/usr/include $(INTERNAL_CFLAGS) \
	  `ls $(SOURCES) | grep -v '\.[hy]$$' | \
	  sort -u` >depend.tmp
# If running in srcdir, translate "./foo.c" into "$srcdir/foo.c" except
# for xm.h, tm.h and nm.h.  This allows the same "depend" file to be used
# by the various subdirectories.
	if [ "${srcdir}" = "." ] ; then \
	  <depend.tmp sed \
	    -e 's; ./xm.h; xm.h;g'  \
	    -e 's; ./tm.h; tm.h;g'  \
	    -e 's; ./nm.h; nm.h;g'  \
	    -e 's; \./; $${srcdir}/;g'  \
	    -e 's; vx-share/; $${srcdir}/vx-share/;g'  \
	    -e 's; nindy-share/; $${srcdir}/nindy-share/;g'  \
	    -e 's; 29k-share/; $${srcdir}/29k-share/;g'  \
	    >depend.tm2; \
	  rm depend.tmp; \
	  mv depend.tm2 depend.tmp; \
	fi
	<depend.tmp sed \
	  -e 's; [xt]m.h;& config.status;g'  \
	  -e 's; $(INCLUDE_DIR)/; $(INCLUDE_DEP)/;g'  \
	  -e 's; $(READLINE_DIR)/; $(READLINE_DEP)/;g'  \
	  -e 's; [a-z0-9./]*bfd/; $(BFD_DEP)/;g'  \
	  -e 's; ./xm.h; xm.h config.status;g'  \
	  -e 's; ./tm.h; tm.h config.status;g'  \
	  -e 's; ./nm.h; nm.h config.status;g'  \
	  >depend.tm3;
# OK, get your sed manual out.  This script makes the rules in
# depend explicitly state the rule, rather than relying on VPATH
# or a .c.o implicit rule.  This is needed for Sun make, and should
# be portable to any make worthy of the name.
# There is one exception: the *.tab.c files can exist either in srcdir
# or in ., so make sure not to use an explicit rule for them.
	<depend.tm3 sed \
	  -e '/:/h' \
	  -e '/\\$$/b end' \
	  -e 'p' \
	  -e 'g' \
	  -e '/:.*\.tab\.c/d' \
	  -e 's/.*:\(.*\.c\).*/	$${CC} -c $${INTERNAL_CFLAGS} \1/' \
	  -e ': end' \
	  >depend.tm4;
	mv depend.tm4 depend
	rm depend.tm?

config.status:
	@echo "You must configure gdb.  Look at the README file for details."
	@false

# This checks the configure.in file versus the config/ directory.
config-check: config-check-hosts config-check-targets
config-check-hosts:
	grep gdb_host= ${srcdir}/configure.in | \
		sed -e 's/.*gdb_host=//' -e 's/ ;;$$/.mh/' | sort -u >HOSTconf.o
	(cd ${srcdir}/config; ls *.mh) >HOSTdir.o
	diff -u HOSTconf.o HOSTdir.o

config-check-targets:
	grep gdb_target= ${srcdir}/configure.in | \
		sed -e 's/.*gdb_target=//' -e 's/ ;;$$/.mh/' | sort -u >TARGconf.o
	(cd ${srcdir}/config; ls *.mt) >TARGdir.o
	diff -u HOSTconf.o HOSTdir.o

# These are not generated by "make depend" because they only are there
# for some machines.
# But these rules don't do what we want; we want to hack the foo.o: tm.h
# dependency to do the right thing.
tm-isi.h tm-sun3.h tm-news.h tm-hp300bsd.h tm-altos.h: tm-m68k.h
tm-hp300hpux.h tm-sun2.h tm-3b1.h: tm-m68k.h
xm-news1000.h: xm-news.h
xm-i386-sv32.h: xm-i386.h
tm-i386gas.h: tm-i386.h
xm-sun4os4.h: xm-sparc.h
tm-sun4os4.h: tm-sparc.h
xm-vaxult.h: xm-vax.h
xm-vaxbsd.h: xm-vax.h

kdb:	$(NTSSTART) $(OBS) $(NTSOBS) ${ADD_DEPS} ${CDEPS}
	rm -f init.c
	$(srcdir)/munch ${MUNCH_DEFINE} $(OBS) $(NTSOBS) > init.c
	$(CC) $(LDFLAGS) -c init.c $(CLIBS) 
	ld -o kdb $(NTSSTART) $(OBS) $(NTSOBS) init.o $(ADD_FILES) \
	  -lc $(CLIBS)

# Put the proper machine-specific files first, so M-. on a machine
# specific routine gets the one for the correct machine.
# The xyzzy stuff below deals with empty DEPFILES
TAGS:	${TAGFILES}
	etags `find ${srcdir}/config -name $(TM_FILE) -print` \
	  `find ${srcdir}/config -name ${XM_FILE} -print` \
	  `find ${srcdir}/config -name ${NAT_FILE} -print` \
	  `for i in yzzy ${DEPFILES}; do \
	     if [ x$$i != xyzzy ]; then \
	       echo ${srcdir}/$$i | sed -e 's/\.o$$/\.c/' ; \
	     fi; \
	   done` \
	  ${TAGFILES}
tags: TAGS

# Making distributions of GDB and friends.

# Make a tar file containing the GDB directory of the distribution.
gdb.tar.Z: force_update
	$(MAKE) $(MFLAGS) -f Makefile.in setup-to-dist
	$(MAKE) $(MFLAGS) -f Makefile.in gdb-$(VERSION).tar.Z

# Make a directory `proto-gdb.dir' that contains an image of the GDB
# directory of the distribution, built up with symlinks.  Note that this
# make target is not directly referenced by any other rules in this makefile,
# it is referenced by the makefile in the parent directory.
make-proto-gdb.dir: force_update 
	$(MAKE) $(MFLAGS) -f Makefile.in setup-to-dist
	$(MAKE) $(MFLAGS) -f Makefile make-proto-gdb-1

# Set up the GDB source directory for distribution, by building all files that
# are products of other files.
setup-to-dist: update-depend force_update
	../configure none
	(cd doc; $(MAKE) $(MFLAGS) GDBvn.texi)
	$(MAKE) $(MFLAGS) gdb.info
	$(MAKE) $(MFLAGS) refcard.ps

# Update the "depend" and "alldeps.mak" files in a source directory.
# We update alldeps.mak first, since it is used to generate the list
# of files to be checked for dependencies.
update-depend: update-alldeps force_update
	../configure none -norecursion
	rm -f depend
	$(MAKE) $(MFLAGS) depend

# Update the "alldeps.mak" file in a source directory.
update-alldeps: force_update
	../configure none -norecursion
	rm -f alldeps.mak
	$(MAKE) $(MFLAGS) alldeps.mak

# Build a tar file from a proto-gdb.dir.
gdb-$(VERSION).tar.Z: force_update
	rm -f gdb.tar gdb-$(VERSION).tar.Z
	$(MAKE) $(MFLAGS) -f Makefile make-proto-gdb-1
	ln -s proto-gdb.dir $(DIST)
	tar chf - $(DIST) | compress >gdb-$(VERSION).tar.Z
	rm -rf $(DIST) proto-gdb.dir

# Build a proto-gdb.dir after GDB has been set up for distribution.
# This stuff must be run in `Makefile', not `Makefile.in`; we use the makefile
# built in the setup-to-dist process, since it defines things like ALLCONFIG
# and ALLDEPFILES, that we need.
make-proto-gdb-1: ${TARFILES} ${TARDIRS} gdb.info
	rm -rf proto-gdb.dir
	mkdir proto-gdb.dir
	rootme=`pwd`/ ; export rootme ; \
	  for i in `echo ${TARDIRS}`; do \
	    (cd proto-gdb.dir ; \
	    mkdir -p $$i; \
	    cd $$i; \
	    ln -s $${rootme}/$$i/* .; \
	    rm -rf SCCS CVS CVS.adm RCS config.status; \
	    if test -f Makefile.in; then rm Makefile; else true; fi;); \
	  done ; \
	  for i in `echo ${TARFILES}`; do \
	    (cd proto-gdb.dir ; \
	    dir=`dirname $$i`; \
	    if test -d $$dir; then true; else mkdir -p $$dir; fi; \
	    ln -s $${rootme}/$$i $$i;); \
	  done
	chmod og=u `find . -print`

# Build a proto-testsuite.dir.
make-proto-testsuite.dir: force_update
	rm -rf proto-testsuite.dir
	mkdir proto-testsuite.dir
	rootme=`pwd`/ ; export rootme ; \
	  for i in `find testsuite -type f -print`; do \
	    (cd proto-testsuite.dir ; \
	    dir=`dirname $$i`; \
	    if test -d $$dir; then true; else mkdir -p $$dir; fi; \
	    ln -s $${rootme}/$$i $$i;); \
	  done
	find proto-testsuite.dir -name Makefile -exec rm {} \;
	find proto-testsuite.dir -name config.status -exec rm {} \;

clean:
	@$(MAKE) $(FLAGS_TO_PASS) DO=clean "DODIRS=$(SUBDIRS)" subdir_do 
	rm -f *.o ${ADD_FILES} *~
	rm -f init.c version.c
	rm -f gdb core make.log
	rm -f gdb[0-9]

distclean: clean c-exp.tab.c m2-exp.tab.c ch-exp.tab.c TAGS
	@$(MAKE) $(FLAGS_TO_PASS) DO=distclean "DODIRS=$(SUBDIRS)" subdir_do 
	rm -f tm.h xm.h config.status
	rm -f y.output yacc.acts yacc.tmp
	rm -f ${TESTS} Makefile depend

realclean: clean
	@$(MAKE) $(FLAGS_TO_PASS) DO=realclean "DODIRS=$(SUBDIRS)" subdir_do
	rm -f c-exp.tab.c m2-exp.tab.c ch-exp.tab.c TAGS
	rm -f tm.h xm.h config.status
	rm -f Makefile depend

STAGESTUFF=${OBS} ${TSOBS} ${NTSOBS} ${ADD_FILES} init.c init.o version.c gdb

subdir_do: force
	@for i in $(DODIRS); do \
		if [ -d ./$$i ] ; then \
			if (cd ./$$i; \
				$(MAKE) $(FLAGS_TO_PASS) $(DO)) ; then true ; \
			else exit 1 ; fi ; \
		else true ; fi ; \
	done

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

force:

# Documentation!
# GDB QUICK REFERENCE (TeX dvi file, CM fonts)
refcard.dvi:
	( cd ./doc; $(MAKE) refcard.dvi $(FLAGS_TO_PASS) )
	mv ./doc/refcard.dvi .

# GDB QUICK REFERENCE (PostScript output, common PS fonts)
refcard.ps:
	( cd ./doc; $(MAKE) refcard.ps $(FLAGS_TO_PASS) )
	mv ./doc/refcard.ps .

# GDB MANUAL: TeX dvi file
gdb.dvi:
	( cd ./doc; $(MAKE) gdb.dvi $(FLAGS_TO_PASS) )
	mv ./doc/gdb.dvi .

# GDB MANUAL: info file
gdb.info:
	( cd ./doc; $(MAKE) gdb.info $(FLAGS_TO_PASS) )
	mv ./doc/gdb.info* .

# Make copying.c from COPYING
copying.c: ${srcdir}/COPYING ${srcdir}/copying.awk
	awk -f ${srcdir}/copying.awk < ${srcdir}/COPYING > copying.c

version.c: Makefile
	echo 'char *version = "$(VERSION)";' >version.c

# c-exp.tab.c is generated in target dir from c-exp.y if it doesn't exist
# in srcdir, then compiled in target dir to c-exp.tab.o.
# ././c-exp.tab.c is so the command argument will never match $(srcdir)/c-exp.y
# (some "makes" rewrite the VPATH into command arguments if they match deps).
# Remove bogus decls for malloc/realloc/free which conflict with everything
# else.
c-exp.tab.o: c-exp.tab.c
c-exp.tab.c: $(srcdir)/c-exp.y $(srcdir)/Makefile.in
	@echo 'Expect 4 shift/reduce conflicts.'
	${YACC} ${YFLAGS} $(srcdir)/c-exp.y
	-sed -e '/extern.*malloc/d' \
	     -e '/extern.*realloc/d' \
	     -e '/extern.*free/d' \
	     -e '/include.*malloc.h/d' \
	     -e 's/malloc/xmalloc/g' \
	     -e 's/realloc/xrealloc/g' \
	  < y.tab.c > ././c-exp.tab.c
	-rm y.tab.c

# ch-exp.tab.c is generated in target dir from ch-exp.y if it doesn't exist
# in srcdir, then compiled in target dir to ch-exp.tab.o.
# Remove bogus decls for malloc/realloc/free which conflict with everything
# else.
ch-exp.tab.o: ch-exp.tab.c
ch-exp.tab.c: $(srcdir)/ch-exp.y $(srcdir)/Makefile.in
	${YACC} ${YFLAGS} $(srcdir)/ch-exp.y
	-sed -e '/extern.*malloc/d' \
	     -e '/extern.*realloc/d' \
	     -e '/extern.*free/d' \
	     -e '/include.*malloc.h/d' \
	     -e 's/malloc/xmalloc/g' \
	     -e 's/realloc/xrealloc/g' \
	  < y.tab.c > ././ch-exp.tab.c
	-rm y.tab.c

# m2-exp.tab.c is generated in target dir from m2-exp.y if it doesn't exist
# in srcdir, then compiled in target dir to m2-exp.tab.o.
# Remove bogus decls for malloc/realloc/free which conflict with everything
# else.
m2-exp.tab.o: m2-exp.tab.c
m2-exp.tab.c: $(srcdir)/m2-exp.y $(srcdir)/Makefile.in
	${YACC} ${YFLAGS} $(srcdir)/m2-exp.y
	-sed -e '/extern.*malloc/d' \
	     -e '/extern.*realloc/d' \
	     -e '/extern.*free/d' \
	     -e '/include.*malloc.h/d' \
	     -e 's/malloc/xmalloc/g' \
	     -e 's/realloc/xrealloc/g' \
	  < y.tab.c > ././m2-exp.tab.c
	-rm y.tab.c

# Used on HP-PA native.
# This rule fails to get automatically generated in depend because gcc -MM
# ends up trying to include ../bfd/sysdep.h, which does not exist in an
# unconfigured BFD directory, and the resulting error suppresses the
# output of dependency information.  For now, just punt.  (FIXME)
paread.o: ${srcdir}/paread.c
	${CC} -c ${INTERNAL_CFLAGS} -I$(BFD_DIR) ${srcdir}/paread.c

lint: $(LINTFILES)
	$(LINT) $(INCLUDE_CFLAGS) $(LINTFLAGS) $(LINTFILES) \
	   `echo ${DEPFILES} | sed 's/\.o /\.c /g'

gdb.cxref: $(SFILES)
	cxref -I. $(SFILES) >gdb.cxref

force_update:

# GNU Make has an annoying habit of putting *all* the Makefile variables
# into the environment, unless you include this target as a circumvention.
# Rumor is that this will be fixed (and this target can be removed)
# in GNU Make 4.0.
.NOEXPORT:

# GNU Make 3.63 has a different problem: it keeps tacking command line
# overrides onto the definition of $(MAKE).  This variable setting
# will remove them.
MAKEOVERRIDES=

## This is ugly, but I don't want GNU make to put these variables in
## the environment.  Older makes will see this as a set of targets
## with no dependencies and no actions.
unexport CHILLFLAGS CHILL_LIB CHILL_FOR_TARGET :

# This is the end of "Makefile.in".  When built into "Makefile"
# by the configure script, two things are added below this point:
# 	alldeps.mak -- definitions of all files that are used in
#			host- or target-dependent configurations
#	depend -- what .o files depend on what .c and .h files,
#			for all configurations.
