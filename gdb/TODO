Contents
--------

If you find inaccuracies in this list, please send mail to
bug-gdb@prep.ai.mit.edu. 

* Things to do for Mach.
* General to do list.

Things to do for Mach
---------------------

This section is up to date as of 28 Oct 1993.

All my attempted compilation was on douglas.gnu.ai.mit.edu.  

0.  Get it to compile and run again, especially for non-threaded
programs (some of the following are sub-tasks for this).

1.  attach_command still contains a call to wait_for_inferior which is
wrong for Mach.  Need to figure out a way to push this functionality
into target_attach (perhaps by having target_attach, for non-Mach
targets, call a function which does what is now in attach_command).

2.  jtv's port contains an #ifdef which skips the call to
insert_step_breakpoint right after SOLIB_CREATE_INFERIOR_HOOK, but
goes ahead and calls insert_breakpoints.  I don't understand this--the
comment would appear to apply to all breakpoints.  Perhaps it is an
artifact from a previous version of the Mach port?  (BTW, the modern
equivalent is the call to proceed from m3_create_inferior; proceed
inserts breakpoints).

3.  Get the thread stuff to use the new generic thread code (enhancing
the generic thread code to include any missing features).  This is
necessary to make thread-specific breakpoints work again.  If someone
wants to try to patch up the old Mach threads code, need to deal with
the hooks for PREPARE_TO_PROCEED and ATTACH_TO_THREAD, which I haven't
merged--can these go in target_resume()?

4.  BFD problem--"Undefined symbol _aout_32_swap_exec_header_in".
Believed to be fixed (fix not yet tested with GDB).

5.  The linker complains about mfree and so on being multiply defined.
Believed to be fixed (fix not yet tested).

6.  i386_mach3_float_info and register_addr were undefined in the
link.  I haven't investigated, but probably just another easy
configuration thing or something.

7.  I couldn't find mach_port_t in any of the headers in
/usr/include/*.h or /usr/include/mach/*.h (I think those are the two
places I grepped; I don't know what headers I was actually getting).
Typedeffing it to void * in nm-m3.h seemed to work, but of course
that's hardly an elegant solution.

8.  Implement the features which CMU gdb has which the main GDB does
not.  This could be done by getting paperwork from CMU and merging
their changes, or by reimplementing them.

General To Do List
------------------

This to do list is probably not up to date, and opinions may vary
about the importance or even desirability of some of the items.

It should be possible to use symbols from shared libraries before we know
exactly where the libraries will be loaded.  E.g. "b perror" before running
the program.  This could maybe be done as an extension of the "breakpoint
re-evaluation" after new symbols are loaded.

Make single_step() insert and remove breakpoints in one operation.

Speed up single stepping by avoiding extraneous ptrace calls.

Speed up single stepping by not inserting and removing breakpoints
each time the inferior starts and stops.

Breakpoints should not be inserted and deleted all the time.  Only the
one(s) there should be removed when we have to step over one.  Support
breakpoints that don't have to be removed to step over them.

Speed up watchpoints by using debug registers, page table diddling (on
SunOS4, can call mprotect() in the inferior; on other machines can do
something simpler), etc.  Note that you need to detect a
"fast-watchable expression" (i.e., if watching "*p", then either a
change to the address pointed to by p or a change to p itself which
causes the value of *p to change, is a watchpoint hit).  It is
possible we will also someday want extensions which are
lower-level--"read from these addresses", "write to these addresses",
etc., but there is no consensus about just how important these are and
exactly what form they would take.  There is a consensus that the
existing watchpoint semantics should use hardware assists when
available.

Update gdbint.texinfo to include doc on the directory structure and 
the various tricks of building gdb.

Do a tutorial in gdb.texinfo on how to do simple things in gdb.
E.g. how to set a breakpoint that just prints something and continues.
How to break on aborts.  Etc.

Provide "voodoo" debugging of core files.  This creates a zombie
process as a child of the debugger, and loads it up with the data,
stack, and regs of the core file.  This allows you to call functions
in the executable, to manipulate the data in the core file.

GDB reopens the source file on every line, as you "next" through it.

Referencing the vtbl member of a struct doesn't work.  It prints OK
if you print the struct, but it gets 0 if you try to deref it.

Persistent command history: A feature where you could save off a list
of the commands you did, so you can edit it into something that will bring
the target to the same place every time you source it.
This would also be useful for automated fast watchpointing; if you go
past the place where it watchpoints, you just start it over again and
do it more carefully.

Deal with the SunOS 4.0 and 4.1.1 ptrace bug that loses the registers if
the stack is paged out.

Finish the C++ exception handling stub routines.  Lint points them out
as unused statics functions.

Perhaps "i source" should take an argument like that of "list".

See if coredep.c's fetch_core_registers can be used on more machines.
E.g. MIPS (mips-xdep.c).

unpack_double() does not handle IEEE float on the target unless the host
is also IEEE.  Death on a vax.

Set up interface between GDB and INFO so that you can hop into interactive
INFO and back out again.  When running under Emacs, should use Emacs
info, else fork the info program.  Installation of GDB should install
its texinfo files into the info tree automagically, including the readline
texinfo files.

"help address" ought to find the "help set print address" entry.

Remove the VTBL internal guts from printouts of C++ structs, unless
vtblprint is set.

Remove "at 0xnnnn" from the "b foo" response, if `print address off' and if
it matches the source line indicated.

The prompt at end of screen should accept space as well as CR.

"List" should put you into a pseudo-"more" where you can hit space to
get more, forever to eof.  (questionable--you can already hit return
to get more, and modal user interfaces are evil -kingdon, 28 Oct
1993).

Check STORE_RETURN_VALUE on all architectures.  Check near it in tm-sparc.h
for other bogosities.

Check for storage leaks in GDB, I'm sure there are a lot!

vtblprint of a vtbl should demangle the names it's printing.

Backtrace should point out what the currently selected frame is, in
its display, perhaps showing "@3 foo (bar, ...)" or ">3 foo (bar,
...)" rather than "#3 foo (bar, ...)".

"i program" should work for core files, and display more info, like what
actually caused it to die.

"x/10i" should shorten the long name, if any, on subsequent lines.

Check through the code for FIXME comments and fix them.  dbxread.c,
blockframe.c, and plenty more.

"next" over a function that longjumps, never stops until next time you happen
to get to that spot by accident.  E.g. "n" over execute_command which has
an error.

Watchpoints seem not entirely reliable, though they haven't failed me recently.

"set zeroprint off", don't bother printing members of structs which are entirely
zero.  Useful for those big structs with few useful members.

GDB does four ioctl's for every command, probably switching terminal modes
to/from inferior or for readline or something.

terminal_ours versus terminal_inferior: cache state.  Switch should be a noop
if the state is the same, too.

ptype $i6 = void??!

Clean up invalid_float handling so gdb doesn't coredump when it tries to
access a NaN.  While this might work on SPARC, other machines are not
configured right.

"b value_at ; commands ; continue ; end" stops EVERY OTHER TIME!
Then once you enter a command, it does the command, runs two more
times, and then stops again!  Bizarre...  (This behaviour has been
modified, but it is not yet 100% predictable when e.g. the commands
call functions in the child, and while there, the child is interrupted
with a signal, or hits a breakpoint.)

help completion, help history should work.

Check that we can handle stack trace through varargs AND alloca in same
function, on 29K.

wait_for_inferior loops forever if wait() gives it an error.

"i frame" shows wrong "arglist at" location, doesn't show where the args
should be found, only their actual values.

There should be a way for "set" commands to validate the new setting
before it takes effect.

A mess of floating point opcodes are missing from sparc-opcode.h.
Also, a little program should test the table for bits that are
overspecified or underspecified.  E.g. if the must-be-ones bits
and the must-be-zeroes bits leave some fields unexamined, and the format
string leaves them unprinted, then point this out.  If multiple
non-alias patterns match, point this out too.  Finally, there should
be a sparc-optest.s file that tries each pattern out.  This file
should end up coming back the same (modulo transformation comments) 
if fed to "gas" then the .o is fed to gdb for disassembly.

Eliminate all the core_file_command's in all the xdep files.
Eliminate separate declarations of registers[] everywhere.

"ena d" is ambiguous, why?  "ena delete" seems to think it is a command!

Line numbers are off in some spots.  In proceed() at 1st "oneproc = 1",
it seems to run that statement, but it doesn't actually.

Perhaps move the tdep, xdep, and nat files, into the config
subdirectories.  If not, at least straighten out their names so that
they all start with the machine name.

inferior_status should include stop_print_frame.  It won't need to be
reset in wait_for_inferior after bpstat_stop_status call, then.

i line VAR produces "Line number not known for symbol ``var''.".  I
thought we were stashing that info now!

We should be able to write to random files at hex offsets like adb.

Make "target xxx" command interruptible.

Handle add_file with separate text, data, and bss addresses.  Maybe
handle separate addresses for each segment in the object file?

Handle free_named_symtab to cope with multiply-loaded object files
in a dynamic linking environment.  Should remember the last copy loaded,
but not get too snowed if it finds references to the older copy.

The original BFD core dump reading routine would itself coredump when fed
a garbage file as a core file.  Does the current one?

Generalize and Standardize the RPC interface to a target program,
improve it beyond the "ptrace" interface, and see if it can become a
standard for remote debugging.

Remove all references to:
	text_offset
	data_offset
	text_data_start
	text_end
	exec_data_offset
	...
now that we have BFD.  All remaining are in machine dependent files.

When quitting with a running program, if a core file was previously
examined, you get "Couldn't read float regs from core file"...if 
indeed it can't.  generic_mourn_inferior...

Have remote targets give a warning on a signal argument to
target_resume.  Or better yet, extend the protocols so that it works
like it does on the Unix-like systems.

Sort help and info output.

Re-organize help categories into things that tend to fit on a screen
and hang together.

renote-nindy.c handles interrupts poorly; it error()s out of badly
chosen places, e.g. leaving current_frame zero, which causes core dumps
on the next command.

Add in commands like ADB's for searching for patterns, etc.  We should
be able to examine and patch raw unsymboled binaries as well in gdb as
we can in adb.  (E.g. increase the timeout in /bin/login without source).

Those xdep files that call register_addr without defining it are
probably simply broken.  When reconfiguring this part of gdb, I could
only make guesses about how to redo some of those files, and I
probably guessed wrong, or left them "for later" when I have a
machine that can attempt to build them.

When doing "step" or "next", if a few lines of source are skipped between
the previous line and the current one, print those lines, not just the
last line of a multiline statement.

When searching for C++ superclasses in value_cast in valops.c, we must
not search the "fields", only the "superclasses".  There might be a
struct with a field name that matches the superclass name.  This can
happen when the struct was defined before the superclass (before the
name became a typedef).

Handling of "&" address-of operator needs some serious overhaul
for ANSI C and consistency on arrays and functions.
  For "float point[15];":
ptype &point[4]   ==> Attempt to take address of non-lvalue.
  For "char *malloc();":
ptype malloc	  ==> "char *()";  should be same as
ptype &malloc     ==> "char *(*)()"
call printf ("%x\n", malloc)   ==> wierd value, should be same as
call printf ("%x\n", &malloc)  ==> correct value

Fix dbxread.c symbol reading in the presence of interrupts.  It
currently leaves a cleanup to blow away the entire symbol table when a
QUIT occurs.  (What's wrong with that? -kingdon, 28 Oct 1993).

Mipsread.c reads include files depth-first, because the dependencies
in the psymtabs are way too inclusive (it seems to me).  Figure out what
really depends on what, to avoid recursing 20 or 30 times while reading
real symtabs.

value_add() should be subtracting the lower bound of arrays, if known,
and possibly checking against the upper bound for error reporting.

mipsread.c symbol table allocation and deallocation should be checked.
My suspicion is that it's full of memory leaks.

SunOS should have a target_lookup_symbol() for common'd things allocated
by the shared library linker ld.so.

When listing source lines, check for a preceding \n, to verify that
the file hasn't changed out from under us.

When listing source lines, eat leading whitespace corresponding to the
line-number prefix we print.  This avoids long lines wrapping.

mipsread.c needs to check for old symtabs and psymtabs for the same
files, the way it happens for dbxread.c and coffread.c, for VxWorks
incremental symbol table reloading.

Get all the remote systems (where the protocol allows it) to be able to
stop the remote system when the GDB user types ^C (like remote.c
does).  For ebmon, use ^Ak.

Possible feature: A version of the "disassemble" command which shows
both source and assembly code ("set symbol-filename on" is a partial
solution).
