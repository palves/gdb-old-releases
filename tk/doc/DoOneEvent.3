'\"
'\" Copyright (c) 1990-1992 The Regents of the University of California.
'\" Copyright (c) 1994-1995 Sun Microsystems, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" 
.so man.macros
.TH Tk_DoOneEvent 3 "" Tk "Tk Library Procedures"
.BS
.SH NAME
Tk_DoOneEvent, Tk_MainLoop \- wait for events and
invoke event handlers
.SH SYNOPSIS
.nf
\fB#include <tk.h>\fR
.sp
int
\fBTk_DoOneEvent\fR(\fIflags\fR)
.sp
\fBTk_MainLoop\fR()
.SH ARGUMENTS
.AS int flags
.AP int flags in
This parameter is normally zero.  It may be an OR-ed combination
of any of the following flag bits:  
.VS
TK_WINDOW_EVENTS,
.VE
TK_FILE_EVENTS, TK_TIMER_EVENTS, TK_IDLE_EVENTS, TK_ALL_EVENTS, or
TK_DONT_WAIT.
.BE

.SH DESCRIPTION
.PP
.VS
These two procedures embody Tk's event loop; they are responsible for
waiting for events and dispatching to event handlers created with the
procedures \fBTk_CreateEventHandler\fR, \fBTk_CreateFileHandler\fR,
\fBTk_CreateTimerHandler\fR, and \fBTk_DoWhenIdle\fR.
\fBTk_DoOneEvent\fR is the key procedure.  It checks to see if there
is a previously queued event on the Tk event queue; if one is found,
it calls the handler(s) for the event and returns.  If there are no
events ready to be handled, then it checks for new events.  If any are
found, it puts all of them on Tk's event queue and returns.  The first new
event will be handled the next time \fBTk_DoOneEvent\fR is called. If no
events are found, \fBTk_DoOneEvent\fR checks for \fBTk_DoWhenIdle\fR
callbacks; if any are found, it invokes all of them and returns.
Finally, if no events or work have been found, then
\fBTk_DoOneEvent\fR sleeps until a timer, file, or window event
occurs; then it adds any new events to the Tk event queue and returns.
The normal return value is 1 to signify that some event or callback
was processed.  If \fBTk_DoOneEvent\fR found no pending or new events
and there were no idle handlers to process, then it returns 0.
.VE
If the \fIflags\fR argument to \fBTk_DoOneEvent\fR is non-zero then
it restricts the kinds of events that will be processed by
\fBTk_DoOneEvent\fR.
\fIFlags\fR may be an OR-ed combination of any of the following bits:
.TP 27
\fBTK_WINDOW_EVENTS\fR \-
.VS
Process window system events.
.VE
.TP 27
\fBTK_FILE_EVENTS\fR \-
Process file events.
.TP 27
\fBTK_TIMER_EVENTS\fR \-
Process timer events.
.TP 27
\fBTK_IDLE_EVENTS\fR \-
Process \fBTk_DoWhenIdle\fR callbacks.
.TP 27
\fBTK_ALL_EVENTS\fR \-
Process all kinds of events:  equivalent to OR-ing together all of the
above flags or specifying none of them.
.TP 27
\fBTK_DONT_WAIT\fR \-
Don't sleep:  process only events that are ready at the time of the
call.
.LP
If any of the flags \fBTK_WINDOW_EVENTS\fR, \fBTK_FILE_EVENTS\fR,
\fBTK_TIMER_EVENTS\fR, or \fBTK_IDLE_EVENTS\fR is set, then the only
events that will be considered are those for which flags are set.
Setting none of these flags is equivalent to the value
\fBTK_ALL_EVENTS\fR, which causes all event types to be processed.
.PP
The \fBTK_DONT_WAIT\fR flag causes \fBTk_DoOneEvent\fR not to put
the process to sleep:  it will check for events but if none are found
then it returns immediately with a return value of 0 to indicate
that no work was done.
.VS
\fBTk_DoOneEvent\fR will also return 0 without doing anything if
\fIflags\fR is \fBTK_IDLE_EVENTS\fR and there are no
\fBTk_DoWhenIdle\fR callbacks pending.
.VE
.PP
\fBTk_MainLoop\fR is a procedure that loops repeatedly calling
\fBTk_DoOneEvent\fR.  It returns only when there are no applications
left in this process (i.e. no main windows exist anymore).  Most
windowing applications will call \fBTk_MainLoop\fR after
initialization; the main execution of the application will consist
entirely of callbacks invoked by \fBTk_ServiceEvent\fR which is called
by \fBTk_DoOneEvent\fR.
.PP
These routines may be invoked recursively.  For example,
it is possible to invoke \fBTk_DoOneEvent\fR recursively
from a handler called by \fBTk_DoOneEvent\fR.  This sort
of operation is useful in some modal situations, such
as when a
notification dialog has been popped up and an application wishes to
wait for the user to click a button in the dialog before
doing anything else.

.SH IMPLEMENTATION
.VS
.PP
\fBTk_DoOneEvent\fR is the key procedure in the system-dependent
notifier.  It is the procedure that watches for system events and
generates the appropriate Tk event structures to put on the Tk event
queue.  This procedure along with \fBTk_Sleep\fR and the procedures
desribed in the \fBTk_NotifyDisplay\fR manual page comprise a
replaceable module which can be changed to support different system
interfaces.  See the \fBTk_QueueEvent\fR and the \fBTk_NotifyDisplay\fR
manual pages for additional details.  The rest of this section
describes the expected behavior of \fBTk_DoOneEvent\fR:
.PP
The \fBTk_DoOneEvent\fR procedure first calls \fBTk_ServiceEvent\fR to
process the first eligible event on the Tk event queue.  If an event
was processed, \fBTk_DoOneEvent\fR returns, otherwise it looks for new
events.  If it finds any timer, window system, or file events pending,
it puts all of them on the Tk event queue by calling
\fBTk_QueueEvent\fR for each event, and then returns.  If no events
were found and \fBTk_NotifyIdle\fR has been called since the last call
to \fBTk_ServiceIdle\fR, then \fBTk_DoOneEvent\fR will invoke
\fBTk_ServiceIdle\fR, to process all of the \fBTk_DoWhenIdle\fR
callbacks, and then return.  If \fBTk_NotifyIdle\fR has not been
called and \fIflags\fR did not contain the \fBTK_DONT_WAIT\fR bit,
then \fBTk_DoOneEvent\fR will sleep until a new event arrives, queue
all detected events, and return.
.VE
.PP
.SH KEYWORDS
callback, event, handler, idle, timer
