AC_PREREQ(2.0)
AC_INIT(z8k-dis.c)
#    configure.in script for the opcodes library.
#    Copyright (C) 1995 Free Software Foundation, Inc.
#    Written by Cygnus Support.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

AC_ARG_ENABLE(targets,
[  --enable-targets        alternative target configurations],
[case "${enableval}" in
  yes | "") AC_ERROR(enable-targets option must specify target names or 'all')
            ;;
  no)       enable_targets= ;;
  *)        enable_targets=$enableval ;;
esac])dnl

# host-specific stuff:

AC_PROG_CC
AC_PROG_RANLIB
AC_CHECK_HEADERS(string.h strings.h)

AC_CONFIG_AUX_DIR(`cd $srcdir/..;pwd`)
AC_CANONICAL_SYSTEM
if test -z "$target" ; then
    AC_MSG_ERROR(Unrecognized target system type; please check config.sub.)
fi
if test -z "$host" ; then
    AC_MSG_ERROR(Unrecognized host system type; please check config.sub.)
fi
AC_ARG_PROGRAM

. ${srcdir}/../bfd/configure.host

if test -f ${srcdir}/../bfd/config/${my_host}.mh ; then
	host_makefile_frag=${srcdir}/../bfd/config/${my_host}.mh
	frags=${host_makefile_frag}
else
	host_makefile_frag=/dev/null
	frags=
fi
AC_SUBST_FILE(host_makefile_frag)

# target-specific stuff:

# Canonicalize the secondary target names.
if test -n "$enable_targets" ; then
    for targ in `echo $enable_targets | sed 's/,/ /g'`
    do
	result=`$ac_config_sub $targ 2>/dev/null`
	if test -n "$result" ; then
	    canon_targets="$canon_targets $result"
	else
	    # Allow targets that config.sub doesn't recognize, like "all".
	    canon_targets="$canon_targets $targ"
	fi
    done
fi

all_targets=false

for targ in $target $canon_targets
do
    bfd_target=`${config_shell} $srcdir/../bfd/config.bfd $targ`

    if test "x$bfd_target" = "xall" ; then
        all_targets=true
    else
	if test ! -f ${srcdir}/../bfd/config/${bfd_target}.mt ; then
	    AC_MSG_ERROR(*** No file ${srcdir}/../bfd/config/${bfd_target}.mt
*** opcodes does not support target ${bfd_target}
*** Look in bfd/config.bfd for supported targets)
	fi

	if test "x$targ" = "x$target" ; then
	    target_makefile_frag=${srcdir}/../bfd/config/${bfd_target}.mt
	else
	    target_extra_frags="$target_extra_frags ${srcdir}/../bfd/config/${bfd_target}.mt"
	fi
    fi
done

# We don't do any links based on the target system, just makefile config.

if test x${all_targets} = xfalse ; then

    allfrags="$target_makefile_frag $target_extra_frags"
    frags="$frags $allfrags"

    # The architectures in all the configured targets.
changequote(,)dnl
    SELECT_ARCHITECTURES=`sed -n '
    s/SELECT_ARCHITECTURES[ 	]*=[ 	]*//p
    ' $allfrags`
changequote([,])dnl

    # Target architecture .o files.
    ta=

    for arch in $SELECT_ARCHITECTURES
    do
	ad=`echo $arch | sed -e s/bfd_//g -e s/_arch//g`
	archdefs="$archdefs -DARCH_$ad"
	case "$arch" in
	bfd_a29k_arch)		ta="$ta a29k-dis.o" ;;
	bfd_alpha_arch)		ta="$ta alpha-dis.o" ;;
	bfd_arm_arch)		ta="$ta arm-dis.o" ;;
	bfd_h8300_arch)		ta="$ta h8300-dis.o" ;;
	bfd_h8500_arch)		ta="$ta h8500-dis.o" ;;
	bfd_hppa_arch)		ta="$ta hppa-dis.o" ;;
	bfd_i386_arch)		ta="$ta i386-dis.o" ;;
	bfd_i960_arch)		ta="$ta i960-dis.o" ;;
	bfd_m68k_arch)		ta="$ta m68k-dis.o" ;;
	bfd_m88k_arch)		ta="$ta m88k-dis.o" ;;
	bfd_mips_arch)		ta="$ta mips-dis.o mips-opc.o" ;;
	bfd_ns32k_arch)		ta="$ta ns32k-dis.o" ;;
	bfd_powerpc_arch)	ta="$ta ppc-dis.o ppc-opc.o" ;;
	bfd_rs6000_arch)	ta="$ta ppc-dis.o ppc-opc.o" ;;
	bfd_sh_arch)		ta="$ta sh-dis.o" ;;
	bfd_sparc_arch)		ta="$ta sparc-dis.o sparc-opc.o" ;;
	bfd_vax_arch)		;;
	bfd_we32k_arch)		;;
	bfd_z8k_arch)		ta="$ta z8k-dis.o" ;;
	bfd_w65_arch)		ta="$ta w65-dis.o" ;;

	"")			;;
	*)		AC_MSG_ERROR(*** unknown target architecture $arch) ;;
	esac
    done

    # Weed out duplicate .o files.
    f=""
    for i in $ta ; do
	case " $f " in
	*" $i "*) ;;
	*) f="$f $i" ;;
	esac
    done
    ta="$f"

    # And duplicate -D flags.
    f=""
    for i in $archdefs ; do
	case " $f " in
	*" $i "*) ;;
	*) f="$f $i" ;;
	esac
    done
    archdefs="$f"

    BFD_MACHINES="$ta"

else	# all_targets is true
    archdefs=-DARCH_all
    BFD_MACHINES='$(ALL_MACHINES)'
fi

AC_SUBST(archdefs)
AC_SUBST(frags)
AC_SUBST(BFD_MACHINES)

AC_CONFIG_HEADER(config.h:config.in)
AC_OUTPUT(Makefile)
